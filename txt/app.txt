app\Events\NewSurveyAssigned.php:
<?php

namespace App\Events;

use App\Models\Survey;
use App\Models\User;
use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Broadcasting\PresenceChannel;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class NewSurveyAssigned implements ShouldBroadcast
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    public $survey;
    public $user;

    /**
     * Create a new event instance.
     */
    public function __construct(Survey $survey, User $user)
    {
        $this->survey = $survey;
        $this->user = $user;
    }

    /**
     * Get the channels the event should broadcast on.
     */
    public function broadcastOn(): array
    {
        return [
            new PrivateChannel('user.'.$this->user->id),
        ];
    }

    /**
     * The event's broadcast name.
     */
    public function broadcastAs(): string
    {
        return 'survey.assigned';
    }

    /**
     * Get the data to broadcast.
     */
    public function broadcastWith(): array
    {
        return [
            'id' => $this->survey->id,
            'title' => $this->survey->title,
            'client_name' => $this->survey->client->name,
            'due_date' => $this->survey->due_date,
            'assigned_at' => now()->format('Y-m-d H:i:s'),
        ];
    }
}

app\Helpers\SettingsHelper.php:
<?php

namespace App\Helpers;

use App\Models\Setting;
use Illuminate\Support\Facades\Cache;

class SettingsHelper
{
    /**
     * Get a setting value
     */
    public static function get($key, $default = null)
    {
        $settings = self::getAllSettings();

        return $settings[$key] ?? $default;
    }

    /**
     * Get all settings
     */
    public static function getAllSettings()
    {
        return Cache::remember('settings', 60 * 24, function () {
            return Setting::getAllSettings();
        });
    }

    /**
     * Clear settings cache
     */
    public static function clearCache()
    {
        Cache::forget('settings');
    }

    /**
     * Get company logo URL
     */
    public static function getCompanyLogo()
    {
        $logo = self::get('company_logo');

        if ($logo && file_exists(public_path('storage/' . $logo))) {
            return asset('storage/' . $logo);
        }

        return asset('images/default-logo.png');
    }

    /**
     * Format date according to settings
     */
    public static function formatDate($date)
    {
        if (!$date) {
            return null;
        }

        if (is_string($date)) {
            $date = new \DateTime($date);
        }

        $format = self::get('date_format', 'd M Y');

        return $date->format($format);
    }

    /**
     * Format time according to settings
     */
    public static function formatTime($time)
    {
        if (!$time) {
            return null;
        }

        if (is_string($time)) {
            $time = new \DateTime($time);
        }

        $format = self::get('time_format', 'H:i');

        return $time->format($format);
    }

    /**
     * Format datetime according to settings
     */
    public static function formatDateTime($datetime)
    {
        if (!$datetime) {
            return null;
        }

        if (is_string($datetime)) {
            $datetime = new \DateTime($datetime);
        }

        $dateFormat = self::get('date_format', 'd M Y');
        $timeFormat = self::get('time_format', 'H:i');

        return $datetime->format("$dateFormat $timeFormat");
    }

    /**
     * Format currency according to settings
     */
    public static function formatCurrency($amount)
    {
        $currency = self::get('currency', 'IDR');

        switch ($currency) {
            case 'IDR':
                return 'Rp ' . number_format($amount, 0, ',', '.');
            case 'USD':
                return '$ ' . number_format($amount, 2, '.', ',');
            default:
                return $amount;
        }
    }
}

app\Http\Controllers\AuthController.php:
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules;
use Illuminate\Auth\Events\Registered;
use Spatie\Permission\Models\Role;

class AuthController extends Controller
{
    /**
     * Show the login form.
     */
    public function showLoginForm()
    {
        return view('auth.login');
    }

    /**
     * Handle login request.
     */
    public function login(Request $request)
    {
        $credentials = $request->validate([
            'email' => 'required|email',
            'password' => 'required',
        ]);

        // Check if user exists and is active
        $user = User::where('email', $credentials['email'])->first();

        if ($user && !$user->is_active) {
            return back()->with('error', 'Your account is inactive. Please contact the administrator.');
        }

        if (Auth::attempt($credentials, $request->filled('remember'))) {
            // Update last login timestamp
            $user->last_login_at = now();
            $user->save();

            $request->session()->regenerate();
            return redirect()->intended(route('dashboard'));
        }

        return back()->withErrors([
            'email' => 'The provided credentials do not match our records.',
        ])->onlyInput('email');
    }

    /**
     * Show the registration form.
     */
    public function showRegistrationForm()
    {
        return view('auth.register');
    }

    /**
     * Handle registration request.
     */
    public function register(Request $request)
    {
        $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
            'is_active' => true,
        ]);

        // Assign default role
        $defaultRole = Role::where('name', 'user')->first();
        if ($defaultRole) {
            $user->assignRole($defaultRole);
        } else {
            // Fallback to direct role assignment if role doesn't exist
            $user->assignRole('user');
        }

        event(new Registered($user));

        Auth::login($user);

        return redirect(route('dashboard'));
    }

    /**
     * Handle logout request.
     */
    public function logout(Request $request)
    {
        Auth::logout();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return redirect('/');
    }
}

app\Http\Controllers\ClientController.php:
<?php

namespace App\Http\Controllers;

use App\Models\Client;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Notifications\NewClientAssigned;
use Illuminate\Support\Facades\Notification;


class ClientController extends Controller
{
    // Remove __construct() method - middleware will be defined in routes
    
    public function index(Request $request)
    {
        $query = Client::with(['pic', 'projects']);
        
        // Search functionality
        if ($request->has('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('name', 'like', "%{$search}%")
                  ->orWhere('email', 'like', "%{$search}%")
                  ->orWhere('phone', 'like', "%{$search}%");
            });
        }
        
        // Filter by status
        if ($request->has('status') && $request->status != '') {
            $query->where('status', $request->status);
        }
        
        // Filter by PIC (for marketing role)
        if (Auth::user() && Auth::user()->hasRole('marketing')) {
            $query->where('pic_id', Auth::id());
        }
        
        $clients = $query->latest()->paginate(10);
        
        return view('clients.index', compact('clients'));
    }

    public function create()
    {
        $pics = User::role(['marketing', 'admin'])->get();
        return view('clients.create', compact('pics'));
    }

    public function store(Request $request)
    {
        
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'nullable|email|unique:clients,email',
            'phone' => 'required|string|max:20',
            'whatsapp' => 'nullable|string|max:20',
            'address' => 'required|string',
            'pic_id' => 'required|exists:users,id',
            'source' => 'required|in:referral,website,walk-in,social-media,other',
            'source_detail' => 'nullable|string|max:255',
            'notes' => 'nullable|string'
        ]);
        
        // If marketing, force PIC to themselves
        if (Auth::user()->hasRole('marketing')) {
            $validated['pic_id'] = Auth::id();
        }
        
        $client = Client::create($validated);
        
        // Send notification to admin and managers
        $adminAndManagers = User::role(['admin', 'manager'])->get();
        
        if ($adminAndManagers->isNotEmpty()) {
            Notification::send($adminAndManagers, new NewClientAssigned($client, Auth::user()));
        }
        
        return redirect()->route('clients.show', $client)
            ->with('success', 'Client berhasil ditambahkan!');
    }

    public function show(Client $client)
    {
        // Check authorization
        if (Auth::user()->hasRole('marketing') && $client->pic_id != Auth::id()) {
            abort(403, 'Unauthorized');
        }
        
        $client->load(['projects', 'pic']);
        return view('clients.show', compact('client'));
    }

    public function edit(Client $client)
    {
        // Check authorization
        if (Auth::user()->hasRole('marketing') && $client->pic_id != Auth::id()) {
            abort(403, 'Unauthorized');
        }
        
        $pics = User::role(['marketing', 'admin'])->get();
        return view('clients.edit', compact('client', 'pics'));
    }

    public function update(Request $request, Client $client)
    {
        // Check authorization
        if (Auth::user()->hasRole('marketing') && $client->pic_id != Auth::id()) {
            abort(403, 'Unauthorized');
        }
        
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'nullable|email|unique:clients,email,' . $client->id,
            'phone' => 'required|string|max:20',
            'whatsapp' => 'nullable|string|max:20',
            'address' => 'required|string',
            'status' => 'required|in:prospek,aktif,selesai',
            'pic_id' => 'required|exists:users,id',
            'source' => 'required|in:referral,website,walk-in,social-media,other',
            'source_detail' => 'nullable|string|max:255',
            'notes' => 'nullable|string'
        ]);
        
        // If marketing, force PIC to themselves
        if (Auth::user()->hasRole('marketing') && !Auth::user()->hasRole('admin')) {
            $validated['pic_id'] = Auth::id();
        }
        
        $client->update($validated);
        
        return redirect()->route('clients.show', $client)
            ->with('success', 'Data client berhasil diupdate!');
    }

    public function destroy(Client $client)
    {
        // Only admin can delete
        if (!Auth::user()->hasRole('admin')) {
            abort(403, 'Unauthorized');
        }
        
        // Check if client has projects
        if ($client->projects()->count() > 0) {
            return back()->with('error', 'Tidak dapat menghapus client yang memiliki project!');
        }
        
        $client->delete();
        
        return redirect()->route('clients.index')
            ->with('success', 'Client berhasil dihapus!');
    }
}

app\Http\Controllers\Controller.php:
<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}

app\Http\Controllers\DashboardController.php:
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Client;
use App\Models\Project;
use App\Models\Survey;
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class DashboardController extends Controller
{
    public function index()
    {
        $user = Auth::user();

        // Get user role
        $roles = $user->getRoleNames();
        $role = $roles->isNotEmpty() ? $roles->first() : 'default';

        // Get user statistics
        $totalUsers = User::count();
        $activeUsers = User::where('is_active', true)->count();
        $inactiveUsers = User::where('is_active', false)->count();

        // Get user roles distribution
        $roleDistribution = DB::table('model_has_roles')
            ->join('roles', 'model_has_roles.role_id', '=', 'roles.id')
            ->select('roles.name', DB::raw('count(*) as count'))
            ->where('model_type', 'App\Models\User')
            ->groupBy('roles.name')
            ->get();

        // Get recently registered users
        $recentUsers = User::with('roles')
            ->orderBy('created_at', 'desc')
            ->limit(5)
            ->get();

        // Get recent users (using created_at instead of last_login_at)
        $recentLogins = User::orderBy('created_at', 'desc')
            ->limit(5)
            ->get();

        // Count data
        $totalClients = Client::count();
        $activeProjects = Project::where('status', 'active')->count();
        $pendingSurveys = Survey::where('status', 'pending')->count();
        $pipelineValue = 2500000000; // Kept original dummy value

        // Monthly revenue data for chart (using sample data instead of DB query)
        // Since the 'value' column doesn't exist, we'll use sample data
        $monthNames = [
            'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
            'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
        ];

        // Sample revenue data
        $revenueData = [
            'Jan' => 150,
            'Feb' => 240,
            'Mar' => 305,
            'Apr' => 480,
            'May' => 520,
            'Jun' => 670,
            'Jul' => 800,
            'Aug' => 950,
            'Sep' => 1100,
            'Oct' => 1220,
            'Nov' => 1330,
            'Dec' => 1450
        ];

        // Project status data (using predefined statuses if status column exists)
        $projectStatuses = ['Lead', 'Survey', 'Quotation', 'Negotiation', 'Deal', 'Execution', 'Completed'];

        try {
            // Try to get actual project status counts
            $projectStatus = Project::selectRaw('status, COUNT(*) as count')
                ->groupBy('status')
                ->get()
                ->pluck('count', 'status')
                ->toArray();
        } catch (\Exception $e) {
            // Use sample data if query fails
            $projectStatus = [
                'Lead' => 12,
                'Survey' => 8,
                'Quotation' => 6,
                'Negotiation' => 4,
                'Deal' => 3,
                'Execution' => 8,
                'Completed' => 5
            ];
        }

        // Common data
        $data = [
            'totalClients' => $totalClients,
            'activeProjects' => $activeProjects,
            'pendingSurveys' => $pendingSurveys,
            'pipelineValue' => $pipelineValue,
            'totalUsers' => $totalUsers,
            'activeUsers' => $activeUsers,
            'inactiveUsers' => $inactiveUsers,
            'roleDistribution' => $roleDistribution,
            'recentUsers' => $recentUsers,
            'recentLogins' => $recentLogins,
            'revenueData' => $revenueData,
            'projectStatus' => $projectStatus
        ];

        // Redirect to appropriate dashboard based on role
        switch ($role) {
            case 'admin':
                return view('dashboard.admin', $data);
            case 'manager':
                return view('dashboard.manager', $data);
            case 'marketing':
                $data['myClients'] = 45;
                $data['myProjects'] = 12;
                return view('dashboard.marketing', $data);
            case 'surveyor':
                $data['mySurveys'] = 28;
                $data['pendingSurveys'] = 3;
                return view('dashboard.surveyor', $data);
            default:
                // Fallback to admin view for testing
                return view('dashboard', $data);
        }
    }
}

app\Http\Controllers\DocumentController.php:
<?php

namespace App\Http\Controllers;

use App\Models\Document;
use App\Models\Project;
use App\Models\Client;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

class DocumentController extends Controller
{
    public function __construct()
    {
        
    }

    public function index(Request $request)
    {
        $query = Document::with(['uploadedBy', 'documentable']);
        
        // Filter by type
        if ($request->has('type') && $request->type != '') {
            $query->where('type', $request->type);
        }
        
        // Filter by category
        if ($request->has('category') && $request->category != '') {
            $query->where('category', $request->category);
        }
        
        // Search
        if ($request->has('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('name', 'like', "%{$search}%")
                  ->orWhere('description', 'like', "%{$search}%");
            });
        }
        
        // Filter by date range
        if ($request->has('date_from')) {
            $query->whereDate('created_at', '>=', $request->date_from);
        }
        if ($request->has('date_to')) {
            $query->whereDate('created_at', '<=', $request->date_to);
        }
        
        // Role-based filtering
        if (Auth::user()->hasRole('marketing')) {
            $query->where(function($q) {
                $q->where('uploaded_by', Auth::id())
                  ->orWhereHasMorph('documentable', [Project::class], function($q) {
                      $q->where('pic_id', Auth::id());
                  })
                  ->orWhereHasMorph('documentable', [Client::class], function($q) {
                      $q->where('pic_id', Auth::id());
                  });
            });
        }
        
        $documents = $query->latest()->paginate(20);
        
        // Get statistics
        $stats = [
            'total_documents' => Document::count(),
            'total_size' => Document::sum('size'),
            'this_month' => Document::whereMonth('created_at', now()->month)->count(),
            'by_category' => Document::selectRaw('category, COUNT(*) as count')
                                    ->groupBy('category')
                                    ->pluck('count', 'category')
        ];
        
        return view('documents.index', compact('documents', 'stats'));
    }

    public function create(Request $request)
    {
        $projects = Project::with('client')->orderBy('name')->get();
        $clients = Client::orderBy('name')->get();
        
        // Pre-select if coming from project/client
        $preselected = [
            'type' => $request->type,
            'id' => $request->id
        ];
        
        return view('documents.create', compact('projects', 'clients', 'preselected'));
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'category' => 'required|in:penawaran,kontrak,invoice,survey,design,progress,other',
            'type' => 'required|in:pdf,image,word,excel,other',
            'description' => 'nullable|string',
            'documentable_type' => 'required|in:project,client',
            'documentable_id' => 'required|integer',
            'file' => 'required|file|max:51200', // 50MB max
            'is_public' => 'boolean'
        ]);
        
        // Handle file upload
        if ($request->hasFile('file')) {
            $file = $request->file('file');
            $originalName = $file->getClientOriginalName();
            $extension = $file->getClientOriginalExtension();
            $size = $file->getSize();
            
            // Generate unique filename
            $filename = Str::uuid() . '.' . $extension;
            
            // Determine path based on documentable type
            $folder = $validated['documentable_type'] == 'project' ? 'projects' : 'clients';
            $path = $file->storeAs('documents/' . $folder . '/' . $validated['documentable_id'], $filename, 'public');
            
            // Get documentable model
            $documentableClass = $validated['documentable_type'] == 'project' 
                ? Project::class 
                : Client::class;
            
            $documentable = $documentableClass::findOrFail($validated['documentable_id']);
            
            // Create document record
            $document = new Document();
            $document->name = $validated['name'];
            $document->original_name = $originalName;
            $document->category = $validated['category'];
            $document->type = $this->determineFileType($extension);
            $document->description = $validated['description'];
            $document->path = $path;
            $document->size = $size;
            $document->extension = $extension;
            $document->uploaded_by = Auth::id();
            $document->is_public = $validated['is_public'] ?? false;
            $document->documentable()->associate($documentable);
            $document->save();
            
            return redirect()->route('documents.show', $document)
                ->with('success', 'Dokumen berhasil diupload!');
        }
        
        return back()->with('error', 'File tidak ditemukan.');
    }

    public function show(Document $document)
    {
        // Check authorization
        if (!$this->canAccessDocument($document)) {
            abort(403, 'Unauthorized');
        }
        
        $document->load(['uploadedBy', 'documentable']);
        
        // Get related documents
        $relatedDocuments = Document::where('documentable_type', $document->documentable_type)
                                   ->where('documentable_id', $document->documentable_id)
                                   ->where('id', '!=', $document->id)
                                   ->latest()
                                   ->limit(5)
                                   ->get();
        
        // Track view
        $document->increment('views');
        
        return view('documents.show', compact('document', 'relatedDocuments'));
    }

    public function edit(Document $document)
    {
        // Check authorization
        if (!Auth::user()->hasRole('admin') && $document->uploaded_by != Auth::id()) {
            abort(403, 'Unauthorized');
        }
        
        return view('documents.edit', compact('document'));
    }

    public function update(Request $request, Document $document)
    {
        // Check authorization
        if (!Auth::user()->hasRole('admin') && $document->uploaded_by != Auth::id()) {
            abort(403, 'Unauthorized');
        }
        
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'category' => 'required|in:penawaran,kontrak,invoice,survey,design,progress,other',
            'description' => 'nullable|string',
            'is_public' => 'boolean'
        ]);
        
        $document->update($validated);
        
        return redirect()->route('documents.show', $document)
            ->with('success', 'Dokumen berhasil diupdate!');
    }

    public function destroy(Document $document)
    {
        // Check authorization
        if (!Auth::user()->hasRole('admin') && $document->uploaded_by != Auth::id()) {
            abort(403, 'Unauthorized');
        }
        
        // Delete file from storage
        Storage::disk('public')->delete($document->path);
        
        // Delete database record
        $document->delete();
        
        return redirect()->route('documents.index')
            ->with('success', 'Dokumen berhasil dihapus!');
    }
    
    public function download(Document $document)
    {
        // Check authorization
        if (!$this->canAccessDocument($document)) {
            abort(403, 'Unauthorized');
        }
        
        // Check if file exists
        if (!Storage::disk('public')->exists($document->path)) {
            abort(404, 'File tidak ditemukan');
        }
        
        // Track download
        $document->increment('downloads');
        
        return Storage::disk('public')->download($document->path, $document->original_name);
    }
    
    public function preview(Document $document)
    {
        // Check authorization
        if (!$this->canAccessDocument($document)) {
            abort(403, 'Unauthorized');
        }
        
        // Only allow preview for certain file types
        $previewableTypes = ['pdf', 'image'];
        if (!in_array($document->type, $previewableTypes)) {
            return redirect()->route('documents.download', $document);
        }
        
        // Check if file exists
        if (!Storage::disk('public')->exists($document->path)) {
            abort(404, 'File tidak ditemukan');
        }
        
        $path = Storage::disk('public')->path($document->path);
        $mimeType = Storage::disk('public')->mimeType($document->path);
        
        return response()->file($path, [
            'Content-Type' => $mimeType,
            'Content-Disposition' => 'inline; filename="' . $document->original_name . '"'
        ]);
    }
    
    public function bulkDownload(Request $request)
    {
        $validated = $request->validate([
            'document_ids' => 'required|array',
            'document_ids.*' => 'exists:documents,id'
        ]);
        
        $documents = Document::whereIn('id', $validated['document_ids'])->get();
        
        // Check authorization for each document
        foreach ($documents as $document) {
            if (!$this->canAccessDocument($document)) {
                abort(403, 'Unauthorized access to some documents');
            }
        }
        
        // Create zip file
        $zipFileName = 'documents_' . now()->format('YmdHis') . '.zip';
        $zipPath = storage_path('app/temp/' . $zipFileName);
        
        // Ensure temp directory exists
        if (!file_exists(storage_path('app/temp'))) {
            mkdir(storage_path('app/temp'), 0777, true);
        }
        
        $zip = new \ZipArchive();
        if ($zip->open($zipPath, \ZipArchive::CREATE) === TRUE) {
            foreach ($documents as $document) {
                $filePath = Storage::disk('public')->path($document->path);
                if (file_exists($filePath)) {
                    $zip->addFile($filePath, $document->original_name);
                }
            }
            $zip->close();
        }
        
        return response()->download($zipPath)->deleteFileAfterSend(true);
    }
    
    private function canAccessDocument(Document $document)
    {
        // Admin can access all
        if (Auth::user()->hasRole('admin')) {
            return true;
        }
        
        // Public documents
        if ($document->is_public) {
            return true;
        }
        
        // Document owner
        if ($document->uploaded_by == Auth::id()) {
            return true;
        }
        
        // Marketing can access their project/client documents
        if (Auth::user()->hasRole('marketing')) {
            if ($document->documentable_type == 'App\Models\Project') {
                return $document->documentable->pic_id == Auth::id();
            }
            if ($document->documentable_type == 'App\Models\Client') {
                return $document->documentable->pic_id == Auth::id();
            }
        }
        
        return false;
    }
    
    private function determineFileType($extension)
    {
        $types = [
            'pdf' => ['pdf'],
            'image' => ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg'],
            'word' => ['doc', 'docx'],
            'excel' => ['xls', 'xlsx'],
            'powerpoint' => ['ppt', 'pptx'],
            'archive' => ['zip', 'rar', '7z'],
            'video' => ['mp4', 'avi', 'mov', 'wmv'],
            'audio' => ['mp3', 'wav', 'ogg']
        ];
        
        foreach ($types as $type => $extensions) {
            if (in_array(strtolower($extension), $extensions)) {
                return $type;
            }
        }
        
        return 'other';
    }
}

app\Http\Controllers\NameController.php:
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class NameController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        //
    }
}

app\Http\Controllers\NotificationController.php:
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Notifications\SurveyAssigned;
use App\Notifications\FollowUpReminder;
use App\Notifications\ProjectStarting;
use App\Notifications\SurveyDeadline;
use App\Notifications\QuotationExpired;
use App\Models\Notification;


class NotificationController extends Controller
{
    // Get unread notifications with limited results and notification details
    public function getUnread()
    {
        $notifications = Auth::user()->unreadNotifications()
            ->latest()
            ->limit(10)
            ->get()
            ->map(function($notification) {
                return [
                    'id' => $notification->id,
                    'type' => class_basename($notification->type),
                    'data' => $notification->data,
                    'time' => $notification->created_at->diffForHumans(),
                    'icon' => $this->getNotificationIcon($notification->type),
                    'color' => $this->getNotificationColor($notification->type)
                ];
            });
        
        return response()->json([
            'notifications' => $notifications,
            'unread_count' => Auth::user()->unreadNotifications()->count()
        ]);
    }

    // Display paginated list of all notifications
    public function index()
    {
        // Paginate notifications (e.g., 10 per page)
        $notifications = Auth::user()->notifications()->latest()->paginate(10);

        // Kelompokkan notifikasi berdasarkan tanggal
        $groupedNotifications = $notifications->groupBy(function($notification) {
            return $notification->created_at->toDateString();
        });

        $unreadCount = Auth::user()->unreadNotifications()->count();

        return view('notifications.index', compact('groupedNotifications', 'unreadCount', 'notifications'));
    }


    // Mark a specific notification as read
    public function markAllAsRead()
    {
        // Get the authenticated user
        $user = Auth::user();

        // Mark all unread notifications as read for the authenticated user
        $user->unreadNotifications->markAsRead();

        // Redirect back or send a response
        return redirect()->route('notifications.index')->with('success', 'All notifications marked as read.');
    }

    public function clearAll()
    {
        // Get the authenticated user
        $user = Auth::user();

        // Delete all notifications for the user
        $user->notifications()->delete();

        // Redirect back or send a response
        return redirect()->route('notifications.index')->with('success', 'All notifications cleared.');
    }

    public function show($id)
    {
        // Retrieve the notification by ID
        $notification = Auth::user()->notifications()->findOrFail($id);
        
        // Mark the notification as read (optional)
        $notification->markAsRead();

        return view('notifications.show', compact('notification'));
    }

    // Get the appropriate icon for the notification type
    private function getNotificationIcon($type)
    {
        $icons = [
            SurveyAssigned::class => 'bi-clipboard-check',
            FollowUpReminder::class => 'bi-calendar-check',
            ProjectStarting::class => 'bi-gear',
            SurveyDeadline::class => 'bi-calendar-x',
            QuotationExpired::class => 'bi-file-earmark-excel',
            'NewClientAssigned' => 'bi-person-plus'
        ];
        
        return $icons[$type] ?? 'bi-bell';
    }

    // Get the appropriate color for the notification type
    private function getNotificationColor($type)
    {
        $colors = [
            SurveyAssigned::class => 'success',
            FollowUpReminder::class => 'warning',
            ProjectStarting::class => 'info',
            SurveyDeadline::class => 'danger',
            QuotationExpired::class => 'secondary',
            'NewClientAssigned' => 'primary'
        ];
        
        return $colors[$type] ?? 'secondary';
    }

    // Optional: Redirect to the related resource after marking as read
    private function redirectToRelatedResource($notification)
    {
        $data = $notification->data;

        switch ($notification->type) {
            case SurveyAssigned::class:
                return redirect()->route('surveys.show', $data['survey_id']);
            case FollowUpReminder::class:
                return redirect()->route('projects.show', $data['project_id']);
            case ProjectStarting::class:
                return redirect()->route('projects.show', $data['project_id']);
            case SurveyDeadline::class:
                return redirect()->route('surveys.show', $data['survey_id']);
            case QuotationExpired::class:
                return redirect()->route('documents.show', $data['document_id']);
            default:
                return redirect()->route('notifications.index');
        }
    }
}

app\Http\Controllers\PipelineController.php:
<?php

namespace App\Http\Controllers;

use App\Models\Project;
use App\Models\PipelineStage;
use App\Models\ProjectPipeline;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class PipelineController extends Controller
{
    public function __construct()
    {
        $this->middleware(['auth', 'role:admin|manager|marketing']);
    }

    public function index(Request $request)
    {
        // Get all pipeline stages
        $stages = PipelineStage::where('is_active', true)->orderBy('order')->get();
        
        // Get projects grouped by status
        $projectsQuery = Project::with(['client', 'pic']);
        
        // Filter by PIC for marketing role
        if (Auth::user()->hasRole('marketing')) {
            $projectsQuery->where('pic_id', Auth::id());
        }
        
        // Search filter
        if ($request->has('search')) {
            $search = $request->search;
            $projectsQuery->where(function($q) use ($search) {
                $q->where('name', 'like', "%{$search}%")
                  ->orWhere('code', 'like', "%{$search}%")
                  ->orWhereHas('client', function($q) use ($search) {
                      $q->where('name', 'like', "%{$search}%");
                  });
            });
        }
        
        // Date range filter
        if ($request->has('date_from')) {
            $projectsQuery->whereDate('created_at', '>=', $request->date_from);
        }
        if ($request->has('date_to')) {
            $projectsQuery->whereDate('created_at', '<=', $request->date_to);
        }
        
        $projects = $projectsQuery->get();
        
        // Group projects by status
        $pipeline = [];
        $statusMapping = [
            'lead' => 'lead',
            'survey' => 'survey', 
            'penawaran' => 'quotation',
            'negosiasi' => 'negotiation',
            'deal' => 'deal',
            'eksekusi' => 'execution',
            'selesai' => 'completed',
            'batal' => 'cancelled'
        ];
        
        foreach ($stages as $stage) {
            $stageProjects = $projects->filter(function($project) use ($stage, $statusMapping) {
                $mappedStatus = $statusMapping[$project->status] ?? $project->status;
                return $stage->slug == $mappedStatus;
            });
            
            $pipeline[] = [
                'stage' => $stage,
                'projects' => $stageProjects,
                'count' => $stageProjects->count(),
                'value' => $stageProjects->sum('project_value')
            ];
        }
        
        // Calculate metrics
        $metrics = [
            'total_projects' => $projects->count(),
            'total_value' => $projects->sum('project_value'),
            'deal_value' => $projects->where('status', 'deal')->sum('deal_value'),
            'conversion_rate' => $this->calculateConversionRate($projects),
            'average_deal_size' => $projects->where('status', 'deal')->avg('deal_value') ?? 0,
            'win_rate' => $this->calculateWinRate($projects)
        ];
        
        // View type (kanban or list)
        $viewType = $request->get('view', 'kanban');
        
        return view('pipeline.index', compact('pipeline', 'metrics', 'viewType'));
    }
    
    public function updateStage(Request $request)
    {
        $validated = $request->validate([
            'project_id' => 'required|exists:projects,id',
            'new_status' => 'required|in:lead,survey,penawaran,negosiasi,deal,eksekusi,selesai,batal'
        ]);
        
        $project = Project::findOrFail($validated['project_id']);
        
        // Check authorization
        if (Auth::user()->hasRole('marketing') && $project->pic_id != Auth::id()) {
            return response()->json(['error' => 'Unauthorized'], 403);
        }
        
        DB::beginTransaction();
        try {
            $oldStatus = $project->status;
            
            // Update project status
            $project->update(['status' => $validated['new_status']]);
            
            // Log pipeline history
            ProjectPipeline::create([
                'project_id' => $project->id,
                'from_status' => $oldStatus,
                'to_status' => $validated['new_status'],
                'changed_by' => Auth::id(),
                'changed_at' => now(),
                'notes' => $request->notes
            ]);
            
            // Special handling for deal status
            if ($validated['new_status'] == 'deal' && !$project->deal_value) {
                $project->update(['deal_value' => $project->project_value]);
            }
            
            DB::commit();
            
            return response()->json([
                'success' => true,
                'message' => 'Status project berhasil diupdate'
            ]);
            
        } catch (\Exception $e) {
            DB::rollback();
            return response()->json([
                'error' => 'Terjadi kesalahan: ' . $e->getMessage()
            ], 500);
        }
    }
    
    public function funnel(Request $request)
    {
        $stages = PipelineStage::where('is_active', true)->orderBy('order')->get();
        
        // Get date range (default last 30 days)
        $dateFrom = $request->get('date_from', now()->subDays(30)->format('Y-m-d'));
        $dateTo = $request->get('date_to', now()->format('Y-m-d'));
        
        // Build funnel data
        $funnelData = [];
        $previousCount = 0;
        
        foreach ($stages as $index => $stage) {
            $count = Project::whereDate('created_at', '>=', $dateFrom)
                           ->whereDate('created_at', '<=', $dateTo)
                           ->where('status', $this->getStatusByStage($stage->slug))
                           ->count();
            
            $conversionRate = $index > 0 && $previousCount > 0 
                ? round(($count / $previousCount) * 100, 1) 
                : 100;
            
            $funnelData[] = [
                'stage' => $stage,
                'count' => $count,
                'conversion_rate' => $conversionRate,
                'color' => $stage->color
            ];
            
            $previousCount = $count;
        }
        
        return view('pipeline.funnel', compact('funnelData', 'dateFrom', 'dateTo'));
    }
    
    public function analytics(Request $request)
    {
        // Pipeline velocity (average time in each stage)
        $velocityData = DB::table('project_pipelines')
            ->select(
                'from_status',
                DB::raw('AVG(TIMESTAMPDIFF(DAY, created_at, changed_at)) as avg_days')
            )
            ->whereNotNull('from_status')
            ->groupBy('from_status')
            ->get();
        
        // Win/Loss analysis
        $winLossData = [
            'won' => Project::where('status', 'deal')->count(),
            'lost' => Project::where('status', 'batal')->count(),
            'in_progress' => Project::whereNotIn('status', ['deal', 'batal', 'selesai'])->count()
        ];
        
        // Monthly pipeline value trend
        $monthlyTrend = Project::selectRaw('
                MONTH(created_at) as month,
                YEAR(created_at) as year,
                SUM(project_value) as total_value,
                COUNT(*) as total_projects
            ')
            ->whereYear('created_at', now()->year)
            ->groupBy('year', 'month')
            ->orderBy('month')
            ->get();
        
        // Top performers (by PIC)
        $topPerformers = Project::select('pic_id', DB::raw('COUNT(*) as total_projects'), DB::raw('SUM(deal_value) as total_value'))
            ->where('status', 'deal')
            ->groupBy('pic_id')
            ->with('pic')
            ->orderByDesc('total_value')
            ->limit(5)
            ->get();
        
        return view('pipeline.analytics', compact('velocityData', 'winLossData', 'monthlyTrend', 'topPerformers'));
    }
    
    private function calculateConversionRate($projects)
    {
        $totalLeads = $projects->count();
        $totalDeals = $projects->whereIn('status', ['deal', 'eksekusi', 'selesai'])->count();
        
        return $totalLeads > 0 ? round(($totalDeals / $totalLeads) * 100, 1) : 0;
    }
    
    private function calculateWinRate($projects)
    {
        $closedProjects = $projects->whereIn('status', ['deal', 'eksekusi', 'selesai', 'batal']);
        $wonProjects = $closedProjects->whereIn('status', ['deal', 'eksekusi', 'selesai']);
        
        return $closedProjects->count() > 0 
            ? round(($wonProjects->count() / $closedProjects->count()) * 100, 1) 
            : 0;
    }
    
    private function getStatusByStage($stageSlug)
    {
        $mapping = [
            'lead' => 'lead',
            'survey' => 'survey',
            'quotation' => 'penawaran',
            'negotiation' => 'negosiasi',
            'deal' => 'deal',
            'execution' => 'eksekusi',
            'completed' => 'selesai',
            'cancelled' => 'batal'
        ];
        
        return $mapping[$stageSlug] ?? $stageSlug;
    }
}

app\Http\Controllers\ProfileController.php:
<?php

namespace App\Http\Controllers;

use App\Http\Requests\ProfileUpdateRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Illuminate\View\View;

class ProfileController extends Controller
{
    /**
     * Display the user's profile form.
     */
    public function edit(Request $request): View
    {
        return view('profile.edit', [
            'user' => $request->user(),
        ]);
    }

    /**
     * Update the user's profile information.
     */
    public function update(ProfileUpdateRequest $request): RedirectResponse
    {
        $request->user()->fill($request->validated());

        if ($request->user()->isDirty('email')) {
            $request->user()->email_verified_at = null;
        }

        $request->user()->save();

        return Redirect::route('profile.edit')->with('status', 'profile-updated');
    }

    /**
     * Delete the user's account.
     */
    public function destroy(Request $request): RedirectResponse
    {
        $request->validateWithBag('userDeletion', [
            'password' => ['required', 'current_password'],
        ]);

        $user = $request->user();

        Auth::logout();

        $user->delete();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return Redirect::to('/');
    }
}

app\Http\Controllers\ProjectController.php:
<?php

namespace App\Http\Controllers;

use App\Models\Project;
use App\Models\Client;
use App\Models\User;
use App\Models\PipelineStage;
use App\Notifications\ProjectStatusChanged;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Notification;
use Illuminate\Routing\Controllers\HasMiddleware;
use Illuminate\Routing\Controllers\Middleware;

class ProjectController extends Controller implements HasMiddleware
{
    /**
     * Get the middleware that should be assigned to the controller.
     */
    public static function middleware(): array
    {
        return [
            new Middleware(['auth', 'role:admin|manager|marketing']),
        ];
    }

    public function index(Request $request)
    {
        $query = Project::with(['client', 'pic', 'latestSurvey']);
        
        // Search
        if ($request->has('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('code', 'like', "%{$search}%")
                  ->orWhere('name', 'like', "%{$search}%")
                  ->orWhereHas('client', function($q) use ($search) {
                      $q->where('name', 'like', "%{$search}%");
                  });
            });
        }
        
        // Filter by status
        if ($request->has('status') && $request->status != '') {
            $query->where('status', $request->status);
        }
        
        // Filter by type
        if ($request->has('type') && $request->type != '') {
            $query->where('type', $request->type);
        }
        
        // Filter by PIC for marketing role
        if (Auth::user()->hasRole('marketing')) {
            $query->where('pic_id', Auth::id());
        }
        
        $projects = $query->latest()->paginate(10);
        
        return view('projects.index', compact('projects'));
    }

    public function create($client_id = null)
    {
        $clients = Client::orderBy('name')->get();
        $pics = User::role(['marketing', 'admin'])->get();
        
        // If client_id provided, pre-select the client
        $selectedClient = $client_id ? Client::find($client_id) : null;
        
        return view('projects.create', compact('clients', 'pics', 'selectedClient'));
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'type' => 'required|in:kantor,showroom,kafe,restoran,outlet,other',
            'location' => 'required|string',
            'client_id' => 'required|exists:clients,id',
            'pic_id' => 'required|exists:users,id',
            'project_value' => 'nullable|numeric|min:0',
            'start_date' => 'nullable|date',
            'target_date' => 'nullable|date|after_or_equal:start_date',
            'description' => 'nullable|string'
        ]);

        // Set initial status
        $validated['status'] = 'lead';

        // Jika marketing, force PIC ke dirinya sendiri
        if (Auth::user()->hasRole('marketing')) {
            $validated['pic_id'] = Auth::id();
        }

        DB::beginTransaction();
        try {
            $project = Project::create($validated);

            // Insert pipeline history SESUAI MIGRASI project_pipelines
            $firstStage = PipelineStage::orderBy('order')->first();
            if ($firstStage) {
                $project->pipelineHistory()->create([
                    'from_status' => null, // Awal, boleh kosong
                    'to_status' => $firstStage->slug ?? 'lead', // Atau hardcode 'lead' jika slug tidak ada
                    'changed_by' => Auth::id(),
                    'changed_at' => now(),
                    'notes' => null,
                ]);
            }

            DB::commit();

            // Send notification to relevant users after successful creation
            $users = collect();
            
            // Notify admin and managers
            $adminAndManagers = User::role(['admin', 'manager'])->get();
            $users = $users->merge($adminAndManagers);
            
            // Notify project PIC if different from creator
            if ($project->pic_id != Auth::id()) {
                $users->push($project->pic);
            }
            
            // Remove duplicates and current user
            $users = $users->unique('id')->reject(function ($user) {
                return $user->id === Auth::id();
            });
            
            if ($users->isNotEmpty()) {
                Notification::send($users, new ProjectStatusChanged(
                    $project, 
                    null, 
                    'lead', 
                    Auth::user()
                ));
            }

            // Redirect sesuai pilihan
            if ($request->has('save_and_survey')) {
                return redirect()->route('surveys.create', ['project_id' => $project->id])
                                ->with('success', 'Project berhasil dibuat. Silakan lanjutkan ke pembuatan survey.');
            }

            return redirect()->route('projects.show', $project)
                            ->with('success', 'Project berhasil dibuat!');
        } catch (\Exception $e) {
            DB::rollback();
            return back()->with('error', 'Terjadi kesalahan: ' . $e->getMessage())
                        ->withInput();
        }
    }


    public function show(Project $project)
    {
        // Check authorization
        if (Auth::user()->hasRole('marketing') && $project->pic_id != Auth::id()) {
            abort(403, 'Unauthorized');
        }
        
        $project->load(['client', 'pic', 'surveys.surveyor', 'surveys.photos', 'documents']);
        
        return view('projects.show', compact('project'));
    }

    public function edit(Project $project)
    {
        // Check authorization
        if (Auth::user()->hasRole('marketing') && $project->pic_id != Auth::id()) {
            abort(403, 'Unauthorized');
        }
        
        $clients = Client::orderBy('name')->get();
        $pics = User::role(['marketing', 'admin'])->get();
        
        return view('projects.edit', compact('project', 'clients', 'pics'));
    }

    public function update(Request $request, Project $project)
    {
        // Check authorization
        if (Auth::user()->hasRole('marketing') && $project->pic_id != Auth::id()) {
            abort(403, 'Unauthorized');
        }
        
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'type' => 'required|in:kantor,showroom,kafe,restoran,outlet,other',
            'location' => 'required|string',
            'client_id' => 'required|exists:clients,id',
            'pic_id' => 'required|exists:users,id',
            'status' => 'required|in:lead,survey,penawaran,negosiasi,deal,eksekusi,selesai,batal',
            'project_value' => 'nullable|numeric|min:0',
            'deal_value' => 'nullable|numeric|min:0',
            'start_date' => 'nullable|date',
            'target_date' => 'nullable|date|after_or_equal:start_date',
            'description' => 'nullable|string'
        ]);
        
        // If marketing, can't change PIC
        if (Auth::user()->hasRole('marketing') && !Auth::user()->hasRole('admin')) {
            $validated['pic_id'] = $project->pic_id;
        }
        
        // Track status change
        $oldStatus = $project->status;
        
        $project->update($validated);
        
        // Send notification if status changed
        if ($oldStatus != $validated['status']) {
            $users = collect();
            
            // Notify project PIC
            $users->push($project->pic);
            
            // Notify admin and managers
            $adminAndManagers = User::role(['admin', 'manager'])->get();
            $users = $users->merge($adminAndManagers);
            
            // Remove duplicates and current user
            $users = $users->unique('id')->reject(function ($user) {
                return $user->id === Auth::id();
            });
            
            // Send notification
            if ($users->isNotEmpty()) {
                Notification::send($users, new ProjectStatusChanged(
                    $project, 
                    $oldStatus, 
                    $validated['status'], 
                    Auth::user()
                ));
            }
        }
        
        return redirect()->route('projects.show', $project)
            ->with('success', 'Project berhasil diupdate!');
    }

    public function destroy(Project $project)
    {
        // Only admin can delete
        if (!Auth::user()->hasRole('admin')) {
            abort(403, 'Unauthorized');
        }
        
        // Check if project has surveys
        if ($project->surveys()->count() > 0) {
            return back()->with('error', 'Tidak dapat menghapus project yang memiliki survey!');
        }
        
        $project->delete();
        
        return redirect()->route('projects.index')
            ->with('success', 'Project berhasil dihapus!');
    }
    
    public function timeline(Project $project)
    {
        $project->load(['surveys', 'documents', 'pipelineHistory']);
        
        // Collect all timeline events
        $timeline = collect();
        
        // Add project creation
        $timeline->push([
            'date' => $project->created_at,
            'type' => 'project_created',
            'title' => 'Project dibuat',
            'description' => 'Project ' . $project->name . ' dibuat oleh ' . $project->pic->name,
            'icon' => 'bi-plus-circle',
            'color' => 'primary'
        ]);
        
        // Add surveys
        foreach ($project->surveys as $survey) {
            $timeline->push([
                'date' => $survey->scheduled_date,
                'type' => 'survey_scheduled',
                'title' => 'Survey dijadwalkan',
                'description' => 'Survey dijadwalkan untuk ' . $survey->scheduled_date->format('d M Y'),
                'icon' => 'bi-calendar',
                'color' => 'info'
            ]);
            
            if ($survey->status == 'completed') {
                $timeline->push([
                    'date' => $survey->actual_date ?? $survey->updated_at,
                    'type' => 'survey_completed',
                    'title' => 'Survey selesai',
                    'description' => 'Survey diselesaikan oleh ' . $survey->surveyor->name,
                    'icon' => 'bi-check-circle',
                    'color' => 'success'
                ]);
            }
        }
        
        // Sort by date descending
        $timeline = $timeline->sortByDesc('date');
        
        return view('projects.timeline', compact('project', 'timeline'));
    }
}

app\Http\Controllers\ReportController.php:
<?php

namespace App\Http\Controllers;

use App\Models\Project;
use App\Models\Client;
use App\Models\Survey;
use App\Models\Document;
use App\Models\User;
use Carbon\Carbon;
use Carbon\CarbonPeriod;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use PDF;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

#[Authenticate]
#[RoleMiddleware('admin|manager|marketing')]
class ReportController extends Controller
{

    /**
     * Display report generator page
     */
    public function index()
    {
        $reportTypes = [
            'project_summary' => 'Project Summary Report',
            'sales_performance' => 'Sales Performance Report',
            'client_acquisition' => 'Client Acquisition Report',
            'survey_analysis' => 'Survey Analysis Report',
            'revenue_forecast' => 'Revenue Forecast Report',
        ];

        return view('reports.index', compact('reportTypes'));
    }

    /**
     * Generate the requested report
     */
    public function generate(Request $request)
    {
        $validated = $request->validate([
            'report_type' => 'required|string',
            'date_from' => 'required|date',
            'date_to' => 'required|date|after_or_equal:date_from',
            'format' => 'required|in:html,pdf,excel',
            'parameters' => 'nullable|array'
        ]);

        // Get date range
        $dateFrom = Carbon::parse($validated['date_from']);
        $dateTo = Carbon::parse($validated['date_to']);

        // Generate report data based on type
        switch ($validated['report_type']) {
            case 'project_summary':
                $data = $this->generateProjectSummaryReport($dateFrom, $dateTo, $validated['parameters'] ?? []);
                $title = 'Project Summary Report';
                break;

            case 'sales_performance':
                $data = $this->generateSalesPerformanceReport($dateFrom, $dateTo, $validated['parameters'] ?? []);
                $title = 'Sales Performance Report';
                break;

            case 'client_acquisition':
                $data = $this->generateClientAcquisitionReport($dateFrom, $dateTo, $validated['parameters'] ?? []);
                $title = 'Client Acquisition Report';
                break;

            case 'survey_analysis':
                $data = $this->generateSurveyAnalysisReport($dateFrom, $dateTo, $validated['parameters'] ?? []);
                $title = 'Survey Analysis Report';
                break;

            case 'revenue_forecast':
                $data = $this->generateRevenueForecastReport($dateFrom, $dateTo, $validated['parameters'] ?? []);
                $title = 'Revenue Forecast Report';
                break;

            default:
                return back()->with('error', 'Invalid report type');
        }

        // Format and return report based on requested format
        switch ($validated['format']) {
            case 'html':
                $view = 'reports.types.' . $validated['report_type'];
                return view($view, [
                    'data' => $data,
                    'dateFrom' => $dateFrom,
                    'dateTo' => $dateTo,
                    'title' => $title,
                    'parameters' => $validated['parameters'] ?? []
                ]);

            case 'pdf':
                $view = 'reports.types.' . $validated['report_type'] . '_pdf';
                $pdf = PDF::loadView($view, [
                    'data' => $data,
                    'dateFrom' => $dateFrom,
                    'dateTo' => $dateTo,
                    'title' => $title,
                    'parameters' => $validated['parameters'] ?? []
                ]);

                $filename = strtolower(str_replace(' ', '_', $title)) . '_' . date('Ymd') . '.pdf';
                return $pdf->download($filename);

            case 'excel':
                return $this->generateExcelReport($data, $title, $dateFrom, $dateTo, $validated['report_type']);

            default:
                return back()->with('error', 'Invalid format');
        }
    }

    /**
     * Generate Project Summary Report
     */
    private function generateProjectSummaryReport($dateFrom, $dateTo, $parameters)
    {
        // Base query with date filter
        $query = Project::whereBetween('created_at', [$dateFrom, $dateTo])
                        ->with(['client', 'pic']);

        // Apply status filter if provided
        if (isset($parameters['status']) && $parameters['status']) {
            $query->where('status', $parameters['status']);
        }

        // Get projects
        $projects = $query->get();

        // Prepare summary data
        $summary = [
            'total_projects' => $projects->count(),
            'total_value' => $projects->sum('project_value'),
            'total_deal_value' => $projects->sum('deal_value'),
            'status_distribution' => $projects->groupBy('status')
                ->map(function ($items) {
                    return [
                        'count' => $items->count(),
                        'value' => $items->sum('project_value')
                    ];
                }),
            'type_distribution' => $projects->groupBy('type')
                ->map(function ($items) {
                    return [
                        'count' => $items->count(),
                        'value' => $items->sum('project_value')
                    ];
                }),
            'projects' => $projects
        ];

        return $summary;
    }

    /**
     * Generate Sales Performance Report
     */
    private function generateSalesPerformanceReport($dateFrom, $dateTo, $parameters)
    {
        // Get all marketing users (PIC)
        $marketingUsers = User::role('marketing')->get();

        // Initialize performance data
        $performanceData = [];

        foreach ($marketingUsers as $user) {
            // Get projects where user is PIC
            $projects = Project::where('pic_id', $user->id)
                ->whereBetween('created_at', [$dateFrom, $dateTo])
                ->get();

            // Calculate metrics
            $totalProjects = $projects->count();
            $totalValue = $projects->sum('project_value');
            $dealValue = $projects->whereIn('status', ['deal', 'eksekusi', 'selesai'])->sum('deal_value');
            $wonProjects = $projects->whereIn('status', ['deal', 'eksekusi', 'selesai'])->count();

            // Calculate conversion rate
            $conversionRate = $totalProjects > 0 ? ($wonProjects / $totalProjects) * 100 : 0;

            // Add to performance data
            $performanceData[] = [
                'user' => $user,
                'total_projects' => $totalProjects,
                'total_value' => $totalValue,
                'deal_value' => $dealValue,
                'won_projects' => $wonProjects,
                'conversion_rate' => $conversionRate,
                'projects' => $projects
            ];
        }

        // Sort by deal value (descending)
        usort($performanceData, function ($a, $b) {
            return $b['deal_value'] <=> $a['deal_value'];
        });

        return $performanceData;
    }

    /**
     * Generate Client Acquisition Report
     */
    private function generateClientAcquisitionReport($dateFrom, $dateTo, $parameters)
    {
        // Get clients created in date range
        $clients = Client::whereBetween('created_at', [$dateFrom, $dateTo])
                        ->with(['pic', 'projects'])
                        ->get();

        // Group by source
        $bySource = $clients->groupBy('source')
            ->map(function ($items) {
                return [
                    'count' => $items->count(),
                    'project_count' => $items->flatMap->projects->count(),
                    'project_value' => $items->flatMap->projects->sum('project_value')
                ];
            });

        // Group by month
        $byMonth = $clients->groupBy(function ($client) {
            return $client->created_at->format('Y-m');
        })->map(function ($items) {
            return [
                'count' => $items->count(),
                'project_count' => $items->flatMap->projects->count(),
                'project_value' => $items->flatMap->projects->sum('project_value')
            ];
        });

        // Prepare summary data
        $summary = [
            'total_clients' => $clients->count(),
            'total_projects' => $clients->flatMap->projects->count(),
            'total_project_value' => $clients->flatMap->projects->sum('project_value'),
            'by_source' => $bySource,
            'by_month' => $byMonth,
            'clients' => $clients
        ];

        return $summary;
    }

    /**
     * Generate Survey Analysis Report
     */
    private function generateSurveyAnalysisReport($dateFrom, $dateTo, $parameters)
    {
        // Get surveys in date range
        $surveys = Survey::whereBetween('created_at', [$dateFrom, $dateTo])
                        ->with(['project', 'surveyor', 'photos'])
                        ->get();

        // Group by status
        $byStatus = $surveys->groupBy('status')
            ->map(function ($items) {
                return [
                    'count' => $items->count(),
                    'photo_count' => $items->sum(function ($survey) {
                        return $survey->photos->count();
                    })
                ];
            });

        // Group by surveyor
        $bySurveyor = $surveys->groupBy('surveyor_id')
            ->map(function ($items) {
                return [
                    'surveyor' => $items->first()->surveyor,
                    'count' => $items->count(),
                    'completed' => $items->where('status', 'completed')->count(),
                    'photo_count' => $items->sum(function ($survey) {
                        return $survey->photos->count();
                    })
                ];
            });

        // Calculate average time between scheduled and actual
        $completedSurveys = $surveys->where('status', 'completed')
            ->where('actual_date', '!=', null);

        $avgCompletionTime = 0;
        if ($completedSurveys->count() > 0) {
            $totalMinutes = 0;
            foreach ($completedSurveys as $survey) {
                $totalMinutes += $survey->scheduled_date->diffInMinutes($survey->actual_date);
            }
            $avgCompletionTime = $totalMinutes / $completedSurveys->count();
        }

        // Prepare summary data
        $summary = [
            'total_surveys' => $surveys->count(),
            'completed_surveys' => $surveys->where('status', 'completed')->count(),
            'pending_surveys' => $surveys->where('status', 'pending')->count(),
            'cancelled_surveys' => $surveys->where('status', 'cancelled')->count(),
            'total_photos' => $surveys->sum(function ($survey) {
                return $survey->photos->count();
            }),
            'avg_completion_time' => $avgCompletionTime,
            'by_status' => $byStatus,
            'by_surveyor' => $bySurveyor,
            'surveys' => $surveys
        ];

        return $summary;
    }

    /**
     * Generate Revenue Forecast Report
     */
    private function generateRevenueForecastReport($dateFrom, $dateTo, $parameters)
    {
        // Get all projects in pipeline
        $projects = Project::whereIn('status', ['lead', 'survey', 'penawaran', 'negosiasi'])
                          ->with(['client', 'pic'])
                          ->get();

        // Define probability by status
        $probabilities = [
            'lead' => 0.1,
            'survey' => 0.3,
            'penawaran' => 0.5,
            'negosiasi' => 0.8,
        ];

        // Calculate weighted revenue
        $projects->map(function ($project) use ($probabilities) {
            $project->probability = $probabilities[$project->status] ?? 0;
            $project->weighted_value = $project->project_value * $project->probability;
            return $project;
        });

        // Group by month (expected close date based on created_at + average days in pipeline)
        $avgDaysInPipeline = 60; // Default 60 days

        $byMonth = [];
        $today = Carbon::today();

        for ($i = 0; $i < 6; $i++) {
            $month = $today->copy()->addMonths($i);
            $monthKey = $month->format('Y-m');

            $monthProjects = $projects->filter(function ($project) use ($month, $avgDaysInPipeline) {
                $expectedCloseDate = $project->created_at->addDays($avgDaysInPipeline);
                return $expectedCloseDate->year == $month->year && $expectedCloseDate->month == $month->month;
            });

            $byMonth[$monthKey] = [
                'month' => $month->format('M Y'),
                'total_projects' => $monthProjects->count(),
                'total_value' => $monthProjects->sum('project_value'),
                'weighted_value' => $monthProjects->sum('weighted_value'),
                'projects' => $monthProjects
            ];
        }

        // Prepare summary data
        $summary = [
            'total_pipeline_projects' => $projects->count(),
            'total_pipeline_value' => $projects->sum('project_value'),
            'total_weighted_value' => $projects->sum('weighted_value'),
            'by_status' => $projects->groupBy('status')
                ->map(function ($items) {
                    return [
                        'count' => $items->count(),
                        'value' => $items->sum('project_value'),
                        'weighted_value' => $items->sum('weighted_value')
                    ];
                }),
            'by_month' => $byMonth,
            'projects' => $projects
        ];

        return $summary;
    }

    /**
     * Generate Excel Report
     */
    private function generateExcelReport($data, $title, $dateFrom, $dateTo, $reportType)
    {
        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        // Set report title and date range
        $sheet->setCellValue('A1', $title);
        $sheet->setCellValue('A2', 'Period: ' . $dateFrom->format('d M Y') . ' to ' . $dateTo->format('d M Y'));

        // Style the header
        $sheet->getStyle('A1')->getFont()->setBold(true)->setSize(16);
        $sheet->getStyle('A2')->getFont()->setSize(12);

        // Set column headers and data based on report type
        switch ($reportType) {
            case 'project_summary':
                $this->setProjectSummaryExcel($sheet, $data);
                break;

            case 'sales_performance':
                $this->setSalesPerformanceExcel($sheet, $data);
                break;

            case 'client_acquisition':
                $this->setClientAcquisitionExcel($sheet, $data);
                break;

            case 'survey_analysis':
                $this->setSurveyAnalysisExcel($sheet, $data);
                break;

            case 'revenue_forecast':
                $this->setRevenueForecastExcel($sheet, $data);
                break;
        }

        // Auto size columns
        foreach (range('A', 'J') as $col) {
            $sheet->getColumnDimension($col)->setAutoSize(true);
        }

        // Create file
        $writer = new Xlsx($spreadsheet);
        $filename = strtolower(str_replace(' ', '_', $title)) . '_' . date('Ymd') . '.xlsx';
        $filepath = storage_path('app/public/reports/' . $filename);

        // Ensure directory exists
        if (!file_exists(storage_path('app/public/reports'))) {
            mkdir(storage_path('app/public/reports'), 0777, true);
        }

        $writer->save($filepath);

        return response()->download($filepath)->deleteFileAfterSend(true);
    }

    /**
     * Set Project Summary Excel Data
     */
    private function setProjectSummaryExcel($sheet, $data)
    {
        // Add Summary Section
        $sheet->setCellValue('A4', 'Summary');
        $sheet->setCellValue('A5', 'Total Projects:');
        $sheet->setCellValue('B5', $data['total_projects']);
        $sheet->setCellValue('A6', 'Total Project Value:');
        $sheet->setCellValue('B6', 'Rp ' . number_format($data['total_value'], 0, ',', '.'));
        $sheet->setCellValue('A7', 'Total Deal Value:');
        $sheet->setCellValue('B7', 'Rp ' . number_format($data['total_deal_value'], 0, ',', '.'));

        // Add Projects List
        $sheet->setCellValue('A9', 'Projects List');

        // Headers
        $sheet->setCellValue('A10', 'No');
        $sheet->setCellValue('B10', 'Project Code');
        $sheet->setCellValue('C10', 'Project Name');
        $sheet->setCellValue('D10', 'Client');
        $sheet->setCellValue('E10', 'Type');
        $sheet->setCellValue('F10', 'Status');
        $sheet->setCellValue('G10', 'PIC');
        $sheet->setCellValue('H10', 'Value');
        $sheet->setCellValue('I10', 'Created Date');

        // Style header row
        $sheet->getStyle('A10:I10')->getFont()->setBold(true);
        $sheet->getStyle('A10:I10')->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setRGB('DDDDDD');

        // Add data rows
        $row = 11;
        foreach ($data['projects'] as $index => $project) {
            $sheet->setCellValue('A' . $row, $index + 1);
            $sheet->setCellValue('B' . $row, $project->code);
            $sheet->setCellValue('C' . $row, $project->name);
            $sheet->setCellValue('D' . $row, $project->client->name ?? 'N/A');
            $sheet->setCellValue('E' . $row, ucfirst($project->type));
            $sheet->setCellValue('F' . $row, ucfirst($project->status));
            $sheet->setCellValue('G' . $row, $project->pic->name ?? 'N/A');
            $sheet->setCellValue('H' . $row, 'Rp ' . number_format($project->project_value, 0, ',', '.'));
            $sheet->setCellValue('I' . $row, $project->created_at->format('d M Y'));
            $row++;
        }
    }

    /**
     * Set Sales Performance Excel Data
     */
    private function setSalesPerformanceExcel($sheet, $data)
    {
        // Add Summary Section
        $sheet->setCellValue('A4', 'Sales Performance Summary');

        // Headers
        $sheet->setCellValue('A5', 'No');
        $sheet->setCellValue('B5', 'PIC Name');
        $sheet->setCellValue('C5', 'Total Projects');
        $sheet->setCellValue('D5', 'Won Projects');
        $sheet->setCellValue('E5', 'Conversion Rate');
        $sheet->setCellValue('F5', 'Total Value');
        $sheet->setCellValue('G5', 'Deal Value');

        // Style header row
        $sheet->getStyle('A5:G5')->getFont()->setBold(true);
        $sheet->getStyle('A5:G5')->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setRGB('DDDDDD');

        // Add data rows
        $row = 6;
        foreach ($data as $index => $salesData) {
            $sheet->setCellValue('A' . $row, $index + 1);
            $sheet->setCellValue('B' . $row, $salesData['user']->name);
            $sheet->setCellValue('C' . $row, $salesData['total_projects']);
            $sheet->setCellValue('D' . $row, $salesData['won_projects']);
            $sheet->setCellValue('E' . $row, round($salesData['conversion_rate'], 1) . '%');
            $sheet->setCellValue('F' . $row, 'Rp ' . number_format($salesData['total_value'], 0, ',', '.'));
            $sheet->setCellValue('G' . $row, 'Rp ' . number_format($salesData['deal_value'], 0, ',', '.'));
            $row++;
        }

        // Add Projects by PIC sections
        $row += 2;
        foreach ($data as $salesData) {
            $sheet->setCellValue('A' . $row, 'Projects by ' . $salesData['user']->name);
            $row++;

            // Project headers
            $sheet->setCellValue('A' . $row, 'No');
            $sheet->setCellValue('B' . $row, 'Project Code');
            $sheet->setCellValue('C' . $row, 'Project Name');
            $sheet->setCellValue('D' . $row, 'Client');
            $sheet->setCellValue('E' . $row, 'Status');
            $sheet->setCellValue('F' . $row, 'Value');
            $sheet->setCellValue('G' . $row, 'Created Date');

            // Style header row
            $sheet->getStyle('A' . $row . ':G' . $row)->getFont()->setBold(true);
            $sheet->getStyle('A' . $row . ':G' . $row)->getFill()
                ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
                ->getStartColor()->setRGB('DDDDDD');

            $row++;

            // Project data
            foreach ($salesData['projects'] as $index => $project) {
                $sheet->setCellValue('A' . $row, $index + 1);
                $sheet->setCellValue('B' . $row, $project->code);
                $sheet->setCellValue('C' . $row, $project->name);
                $sheet->setCellValue('D' . $row, $project->client->name ?? 'N/A');
                $sheet->setCellValue('E' . $row, ucfirst($project->status));
                $sheet->setCellValue('F' . $row, 'Rp ' . number_format($project->project_value, 0, ',', '.'));
                $sheet->setCellValue('G' . $row, $project->created_at->format('d M Y'));
                $row++;
            }

            $row += 2;
        }
    }

    /**
     * Set Client Acquisition Excel Data
     */
    private function setClientAcquisitionExcel($sheet, $data)
    {
        // Add Summary Section
        $sheet->setCellValue('A4', 'Client Acquisition Summary');
        $sheet->setCellValue('A5', 'Total New Clients:');
        $sheet->setCellValue('B5', $data['total_clients']);
        $sheet->setCellValue('A6', 'Total Projects from New Clients:');
        $sheet->setCellValue('B6', $data['total_projects']);
        $sheet->setCellValue('A7', 'Total Project Value:');
        $sheet->setCellValue('B7', 'Rp ' . number_format($data['total_project_value'], 0, ',', '.'));

        // Add Source Distribution
        $sheet->setCellValue('A9', 'Source Distribution');

        // Headers
        $sheet->setCellValue('A10', 'Source');
        $sheet->setCellValue('B10', 'Client Count');
        $sheet->setCellValue('C10', 'Project Count');
        $sheet->setCellValue('D10', 'Project Value');

        // Style header row
        $sheet->getStyle('A10:D10')->getFont()->setBold(true);
        $sheet->getStyle('A10:D10')->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setRGB('DDDDDD');

        // Add data rows
        $row = 11;
        foreach ($data['by_source'] as $source => $sourceData) {
            $sheet->setCellValue('A' . $row, ucfirst($source));
            $sheet->setCellValue('B' . $row, $sourceData['count']);
            $sheet->setCellValue('C' . $row, $sourceData['project_count']);
            $sheet->setCellValue('D' . $row, 'Rp ' . number_format($sourceData['project_value'], 0, ',', '.'));
            $row++;
        }

        // Add Monthly Distribution
        $row += 2;
        $sheet->setCellValue('A' . $row, 'Monthly Distribution');
        $row++;

        // Headers
        $sheet->setCellValue('A' . $row, 'Month');
        $sheet->setCellValue('B' . $row, 'Client Count');
        $sheet->setCellValue('C' . $row, 'Project Count');
        $sheet->setCellValue('D' . $row, 'Project Value');

        // Style header row
        $sheet->getStyle('A' . $row . ':D' . $row)->getFont()->setBold(true);
        $sheet->getStyle('A' . $row . ':D' . $row)->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setRGB('DDDDDD');

        $row++;

        // Add data rows
        foreach ($data['by_month'] as $month => $monthData) {
            $sheet->setCellValue('A' . $row, Carbon::createFromFormat('Y-m', $month)->format('M Y'));
            $sheet->setCellValue('B' . $row, $monthData['count']);
            $sheet->setCellValue('C' . $row, $monthData['project_count']);
            $sheet->setCellValue('D' . $row, 'Rp ' . number_format($monthData['project_value'], 0, ',', '.'));
            $row++;
        }

        // Add Clients List
        $row += 2;
        $sheet->setCellValue('A' . $row, 'New Clients List');
        $row++;

        // Headers
        $sheet->setCellValue('A' . $row, 'No');
        $sheet->setCellValue('B' . $row, 'Client Name');
        $sheet->setCellValue('C' . $row, 'Email');
        $sheet->setCellValue('D' . $row, 'Phone');
        $sheet->setCellValue('E' . $row, 'Source');
        $sheet->setCellValue('F' . $row, 'Status');
        $sheet->setCellValue('G' . $row, 'Project Count');
        $sheet->setCellValue('H' . $row, 'Created Date');

        // Style header row
        $sheet->getStyle('A' . $row . ':H' . $row)->getFont()->setBold(true);
        $sheet->getStyle('A' . $row . ':H' . $row)->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setRGB('DDDDDD');

        $row++;

        // Add data rows
        foreach ($data['clients'] as $index => $client) {
            $sheet->setCellValue('A' . $row, $index + 1);
            $sheet->setCellValue('B' . $row, $client->name);
            $sheet->setCellValue('C' . $row, $client->email);
            $sheet->setCellValue('D' . $row, $client->phone);
            $sheet->setCellValue('E' . $row, ucfirst($client->source));
            $sheet->setCellValue('F' . $row, ucfirst($client->status));
            $sheet->setCellValue('G' . $row, $client->projects->count());
            $sheet->setCellValue('H' . $row, $client->created_at->format('d M Y'));
            $row++;
        }
    }

    /**
     * Set Survey Analysis Excel Data
     */
    private function setSurveyAnalysisExcel($sheet, $data)
    {
        // Add Summary Section
        $sheet->setCellValue('A4', 'Survey Analysis Summary');
        $sheet->setCellValue('A5', 'Total Surveys:');
        $sheet->setCellValue('B5', $data['total_surveys']);
        $sheet->setCellValue('A6', 'Completed Surveys:');
        $sheet->setCellValue('B6', $data['completed_surveys']);
        $sheet->setCellValue('A7', 'Pending Surveys:');
        $sheet->setCellValue('B7', $data['pending_surveys']);
        $sheet->setCellValue('A8', 'Total Photos:');
        $sheet->setCellValue('B8', $data['total_photos']);

        // Add Status Distribution
        $sheet->setCellValue('A10', 'Status Distribution');

        // Headers
        $sheet->setCellValue('A11', 'Status');
        $sheet->setCellValue('B11', 'Count');
        $sheet->setCellValue('C11', 'Photo Count');

        // Style header row
        $sheet->getStyle('A11:C11')->getFont()->setBold(true);
        $sheet->getStyle('A11:C11')->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setRGB('DDDDDD');

        // Add data rows
        $row = 12;
        foreach ($data['by_status'] as $status => $statusData) {
            $sheet->setCellValue('A' . $row, ucfirst($status));
            $sheet->setCellValue('B' . $row, $statusData['count']);
            $sheet->setCellValue('C' . $row, $statusData['photo_count']);
            $row++;
        }

        // Add Surveyor Performance
        $row += 2;
        $sheet->setCellValue('A' . $row, 'Surveyor Performance');
        $row++;

        // Headers
        $sheet->setCellValue('A' . $row, 'No');
        $sheet->setCellValue('B' . $row, 'Surveyor Name');
        $sheet->setCellValue('C' . $row, 'Total Surveys');
        $sheet->setCellValue('D' . $row, 'Completed');
        $sheet->setCellValue('E' . $row, 'Completion Rate');
        $sheet->setCellValue('F' . $row, 'Photo Count');

        // Style header row
        $sheet->getStyle('A' . $row . ':F' . $row)->getFont()->setBold(true);
        $sheet->getStyle('A' . $row . ':F' . $row)->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setRGB('DDDDDD');

        $row++;

        // Add data rows
        $index = 1;
        foreach ($data['by_surveyor'] as $surveyorData) {
            $completionRate = $surveyorData['count'] > 0
                ? round(($surveyorData['completed'] / $surveyorData['count']) * 100, 1)
                : 0;

            $sheet->setCellValue('A' . $row, $index);
            $sheet->setCellValue('B' . $row, $surveyorData['surveyor']->name);
            $sheet->setCellValue('C' . $row, $surveyorData['count']);
            $sheet->setCellValue('D' . $row, $surveyorData['completed']);
            $sheet->setCellValue('E' . $row, $completionRate . '%');
            $sheet->setCellValue('F' . $row, $surveyorData['photo_count']);
            $row++;
            $index++;
        }

        // Add Surveys List
        $row += 2;
        $sheet->setCellValue('A' . $row, 'Surveys List');
        $row++;

        // Headers
        $sheet->setCellValue('A' . $row, 'No');
        $sheet->setCellValue('B' . $row, 'Project');
        $sheet->setCellValue('C' . $row, 'Surveyor');
        $sheet->setCellValue('D' . $row, 'Scheduled Date');
        $sheet->setCellValue('E' . $row, 'Actual Date');
        $sheet->setCellValue('F' . $row, 'Status');
        $sheet->setCellValue('G' . $row, 'Photos');

        // Style header row
        $sheet->getStyle('A' . $row . ':G' . $row)->getFont()->setBold(true);
        $sheet->getStyle('A' . $row . ':G' . $row)->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setRGB('DDDDDD');

        $row++;

        // Add data rows
        foreach ($data['surveys'] as $index => $survey) {
            $sheet->setCellValue('A' . $row, $index + 1);
            $sheet->setCellValue('B' . $row, $survey->project->name ?? 'N/A');
            $sheet->setCellValue('C' . $row, $survey->surveyor->name ?? 'N/A');
            $sheet->setCellValue('D' . $row, $survey->scheduled_date->format('d M Y H:i'));
            $sheet->setCellValue('E' . $row, $survey->actual_date ? $survey->actual_date->format('d M Y H:i') : 'N/A');
            $sheet->setCellValue('F' . $row, ucfirst($survey->status));
            $sheet->setCellValue('G' . $row, $survey->photos->count());
            $row++;
        }
    }

    /**
     * Set Revenue Forecast Excel Data
     */
    private function setRevenueForecastExcel($sheet, $data)
    {
        // Add Summary Section
        $sheet->setCellValue('A4', 'Revenue Forecast Summary');
        $sheet->setCellValue('A5', 'Total Pipeline Projects:');
        $sheet->setCellValue('B5', $data['total_pipeline_projects']);
        $sheet->setCellValue('A6', 'Total Pipeline Value:');
        $sheet->setCellValue('B6', 'Rp ' . number_format($data['total_pipeline_value'], 0, ',', '.'));
        $sheet->setCellValue('A7', 'Total Weighted Value:');
        $sheet->setCellValue('B7', 'Rp ' . number_format($data['total_weighted_value'], 0, ',', '.'));

        // Add Monthly Forecast
        $sheet->setCellValue('A9', 'Monthly Forecast');

        // Headers
        $sheet->setCellValue('A10', 'Month');
        $sheet->setCellValue('B10', 'Projects');
        $sheet->setCellValue('C10', 'Total Value');
        $sheet->setCellValue('D10', 'Weighted Value');

        // Style header row
        $sheet->getStyle('A10:D10')->getFont()->setBold(true);
        $sheet->getStyle('A10:D10')->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setRGB('DDDDDD');

        // Add data rows
        $row = 11;
        foreach ($data['by_month'] as $month => $monthData) {
            $sheet->setCellValue('A' . $row, $monthData['month']);
            $sheet->setCellValue('B' . $row, $monthData['total_projects']);
            $sheet->setCellValue('C' . $row, 'Rp ' . number_format($monthData['total_value'], 0, ',', '.'));
            $sheet->setCellValue('D' . $row, 'Rp ' . number_format($monthData['weighted_value'], 0, ',', '.'));
            $row++;
        }

        // Add Status Distribution
        $row += 2;
        $sheet->setCellValue('A' . $row, 'Status Distribution');
        $row++;

        // Headers
        $sheet->setCellValue('A' . $row, 'Status');
        $sheet->setCellValue('B' . $row, 'Projects');
        $sheet->setCellValue('C' . $row, 'Total Value');
        $sheet->setCellValue('D' . $row, 'Weighted Value');
        $sheet->setCellValue('E' . $row, 'Probability');

        // Style header row
        $sheet->getStyle('A' . $row . ':E' . $row)->getFont()->setBold(true);
        $sheet->getStyle('A' . $row . ':E' . $row)->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setRGB('DDDDDD');

        $row++;

        // Probability mapping
        $probabilities = [
            'lead' => '10%',
            'survey' => '30%',
            'penawaran' => '50%',
            'negosiasi' => '80%',
        ];

        // Add data rows
        foreach ($data['by_status'] as $status => $statusData) {
            $sheet->setCellValue('A' . $row, ucfirst($status));
            $sheet->setCellValue('B' . $row, $statusData['count']);
            $sheet->setCellValue('C' . $row, 'Rp ' . number_format($statusData['value'], 0, ',', '.'));
            $sheet->setCellValue('D' . $row, 'Rp ' . number_format($statusData['weighted_value'], 0, ',', '.'));
            $sheet->setCellValue('E' . $row, $probabilities[$status] ?? 'N/A');
            $row++;
        }

        // Add Projects List
        $row += 2;
        $sheet->setCellValue('A' . $row, 'Pipeline Projects');
        $row++;

        // Headers
        $sheet->setCellValue('A' . $row, 'No');
        $sheet->setCellValue('B' . $row, 'Project Code');
        $sheet->setCellValue('C' . $row, 'Project Name');
        $sheet->setCellValue('D' . $row, 'Client');
        $sheet->setCellValue('E' . $row, 'Status');
        $sheet->setCellValue('F' . $row, 'Value');
        $sheet->setCellValue('G' . $row, 'Probability');
        $sheet->setCellValue('H' . $row, 'Weighted Value');
        $sheet->setCellValue('I' . $row, 'PIC');

        // Style header row
        $sheet->getStyle('A' . $row . ':I' . $row)->getFont()->setBold(true);
        $sheet->getStyle('A' . $row . ':I' . $row)->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setRGB('DDDDDD');

        $row++;

        // Add data rows
        foreach ($data['projects'] as $index => $project) {
            $sheet->setCellValue('A' . $row, $index + 1);
            $sheet->setCellValue('B' . $row, $project->code);
            $sheet->setCellValue('C' . $row, $project->name);
            $sheet->setCellValue('D' . $row, $project->client->name ?? 'N/A');
            $sheet->setCellValue('E' . $row, ucfirst($project->status));
            $sheet->setCellValue('F' . $row, 'Rp ' . number_format($project->project_value, 0, ',', '.'));
            $sheet->setCellValue('G' . $row, ($project->probability * 100) . '%');
            $sheet->setCellValue('H' . $row, 'Rp ' . number_format($project->weighted_value, 0, ',', '.'));
            $sheet->setCellValue('I' . $row, $project->pic->name ?? 'N/A');
            $row++;
        }
    }
}

app\Http\Controllers\SettingController.php:
<?php

namespace App\Http\Controllers;

use App\Models\Setting;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Validator;
use Illuminate\Routing\Controller;

class SettingController extends Controller
{
    public function __construct()
    {
        $this->middleware(['auth', 'role:admin']);
    }

    /**
     * Display the settings dashboard
     */
    public function index()
    {
        $generalSettings = Setting::where('group', 'general')->get()->keyBy('key');
        $companySettings = Setting::where('group', 'company')->get()->keyBy('key');
        $notificationSettings = Setting::where('group', 'notification')->get()->keyBy('key');
        $userSettings = Setting::where('group', 'user')->get()->keyBy('key');

        return view('settings.index', compact(
            'generalSettings',
            'companySettings',
            'notificationSettings',
            'userSettings'
        ));
    }

    /**
     * Update general settings
     */
    public function updateGeneral(Request $request)
    {
        $validated = $request->validate([
            'site_name' => 'required|string|max:255',
            'site_description' => 'nullable|string|max:1000',
            'maintenance_mode' => 'boolean',
            'default_pagination' => 'required|integer|min:5|max:100',
            'date_format' => 'required|string|in:d/m/Y,m/d/Y,Y-m-d,d-m-Y,d M Y',
            'time_format' => 'required|string|in:H:i,h:i A',
            'timezone' => 'required|string|in:Asia/Jakarta,Asia/Makassar,Asia/Jayapura'
        ]);

        foreach ($validated as $key => $value) {
            Setting::updateOrCreate(
                ['key' => $key, 'group' => 'general'],
                ['value' => $value]
            );
        }

        $this->clearSettingsCache();

        return back()->with('success', 'General settings updated successfully');
    }

    /**
     * Update company settings
     */
    public function updateCompany(Request $request)
    {
        $validated = $request->validate([
            'company_name' => 'required|string|max:255',
            'company_address' => 'nullable|string|max:1000',
            'company_phone' => 'nullable|string|max:20',
            'company_email' => 'nullable|email|max:255',
            'company_website' => 'nullable|url|max:255',
            'company_tax_id' => 'nullable|string|max:50',
            'invoice_prefix' => 'nullable|string|max:10',
            'currency' => 'required|string|in:IDR,USD',
            'fiscal_year_start' => 'required|string|date_format:m-d'
        ]);

        // Handle company logo upload
        if ($request->hasFile('company_logo')) {
            $request->validate([
                'company_logo' => 'image|mimes:jpeg,png,jpg|max:2048'
            ]);

            $logoFile = $request->file('company_logo');
            $logoPath = $logoFile->store('settings', 'public');

            // Delete old logo if exists
            $oldLogo = Setting::where('key', 'company_logo')->where('group', 'company')->first();
            if ($oldLogo && Storage::disk('public')->exists($oldLogo->value)) {
                Storage::disk('public')->delete($oldLogo->value);
            }

            Setting::updateOrCreate(
                ['key' => 'company_logo', 'group' => 'company'],
                ['value' => $logoPath]
            );
        }

        foreach ($validated as $key => $value) {
            Setting::updateOrCreate(
                ['key' => $key, 'group' => 'company'],
                ['value' => $value]
            );
        }

        $this->clearSettingsCache();

        return back()->with('success', 'Company settings updated successfully');
    }

    /**
     * Update notification settings
     */
    public function updateNotification(Request $request)
    {
        $validated = $request->validate([
            'email_notifications' => 'boolean',
            'survey_notifications' => 'boolean',
            'project_status_notifications' => 'boolean',
            'document_upload_notifications' => 'boolean',
            'client_notifications' => 'boolean',
            'notification_email' => 'required_if:email_notifications,1|nullable|email',
            'email_sender_name' => 'required_if:email_notifications,1|nullable|string|max:255'
        ]);

        foreach ($validated as $key => $value) {
            Setting::updateOrCreate(
                ['key' => $key, 'group' => 'notification'],
                ['value' => $value]
            );
        }

        $this->clearSettingsCache();

        return back()->with('success', 'Notification settings updated successfully');
    }

    /**
     * Update user settings
     */
    public function updateUser(Request $request)
    {
        $validated = $request->validate([
            'default_role' => 'required|string|exists:roles,name',
            'allow_registration' => 'boolean',
            'account_approval' => 'boolean',
            'password_min_length' => 'required|integer|min:6|max:20',
            'password_requires_letters' => 'boolean',
            'password_requires_numbers' => 'boolean',
            'password_requires_symbols' => 'boolean',
            'user_avatar_max_size' => 'required|integer|min:1|max:10',
            'inactive_user_days' => 'required|integer|min:30|max:365'
        ]);

        foreach ($validated as $key => $value) {
            Setting::updateOrCreate(
                ['key' => $key, 'group' => 'user'],
                ['value' => $value]
            );
        }

        $this->clearSettingsCache();

        return back()->with('success', 'User settings updated successfully');
    }

    /**
     * Display the system information
     */
    public function system()
    {
        $phpVersion = phpversion();
        $laravelVersion = app()->version();
        $serverOS = php_uname('s') . ' ' . php_uname('r');
        $serverSoftware = $_SERVER['SERVER_SOFTWARE'] ?? 'Unknown';
        $databaseType = config('database.default');
        $databaseVersion = match($databaseType) {
            'mysql' => \DB::select('SELECT VERSION() as version')[0]->version,
            'pgsql' => \DB::select('SELECT version()')[0]->version,
            default => 'Unknown'
        };

        $diskTotal = disk_total_space('/');
        $diskFree = disk_free_space('/');
        $diskUsed = $diskTotal - $diskFree;
        $diskUsedPercent = round(($diskUsed / $diskTotal) * 100, 2);

        $memInfo = $this->getSystemMemoryInfo();
        $memoryUsedPercent = isset($memInfo['MemTotal']) && isset($memInfo['MemAvailable'])
            ? round((($memInfo['MemTotal'] - $memInfo['MemAvailable']) / $memInfo['MemTotal']) * 100, 2)
            : null;

        $systemInfo = [
            'PHP Version' => $phpVersion,
            'Laravel Version' => $laravelVersion,
            'Server OS' => $serverOS,
            'Web Server' => $serverSoftware,
            'Database Type' => ucfirst($databaseType),
            'Database Version' => $databaseVersion,
            'Disk Usage' => "$diskUsedPercent% used (" . $this->formatBytes($diskUsed) . " of " . $this->formatBytes($diskTotal) . ")",
            'Memory Usage' => $memoryUsedPercent ? "$memoryUsedPercent%" : 'Unknown',
            'Max Upload Size' => ini_get('upload_max_filesize'),
            'Post Max Size' => ini_get('post_max_size'),
            'Max Execution Time' => ini_get('max_execution_time') . 's',
        ];

        // Extension checks
        $requiredExtensions = [
            'BCMath', 'Ctype', 'Fileinfo', 'JSON', 'Mbstring', 'OpenSSL',
            'PDO', 'Tokenizer', 'XML', 'cURL', 'GD'
        ];

        $extensionStatus = [];
        foreach ($requiredExtensions as $extension) {
            $extensionStatus[$extension] = extension_loaded(strtolower($extension));
        }

        // Directory permissions
        $directories = [
            'Storage' => storage_path(),
            'Bootstrap/Cache' => base_path('bootstrap/cache'),
            'Public' => public_path(),
            'Public/Storage' => public_path('storage'),
        ];

        $directoryPermissions = [];
        foreach ($directories as $name => $path) {
            $directoryPermissions[$name] = [
                'path' => $path,
                'writable' => is_writable($path)
            ];
        }

        return view('settings.system', compact('systemInfo', 'extensionStatus', 'directoryPermissions'));
    }

    /**
     * Display the backup page
     */
    public function backup()
    {
        $backups = Storage::disk('backup')->files();
        $backups = array_filter($backups, function($file) {
            return pathinfo($file, PATHINFO_EXTENSION) === 'zip';
        });

        $backupData = [];
        foreach ($backups as $backup) {
            $backupData[] = [
                'name' => basename($backup),
                'size' => Storage::disk('backup')->size($backup),
                'last_modified' => Storage::disk('backup')->lastModified($backup),
            ];
        }

        // Sort backups by last modified (newest first)
        usort($backupData, function($a, $b) {
            return $b['last_modified'] <=> $a['last_modified'];
        });

        return view('settings.backup', compact('backupData'));
    }

    /**
     * Create a new backup
     */
    public function createBackup()
    {
        try {
            // Initiate backup using the backup package
            \Artisan::call('backup:run');

            return back()->with('success', 'Backup created successfully');
        } catch (\Exception $e) {
            return back()->with('error', 'Failed to create backup: ' . $e->getMessage());
        }
    }

    /**
     * Download a backup file
     */
    public function downloadBackup($filename)
    {
        $filePath = Storage::disk('backup')->path($filename);

        if (!Storage::disk('backup')->exists($filename)) {
            return back()->with('error', 'Backup file not found');
        }

        return response()->download($filePath);
    }

    /**
     * Delete a backup file
     */
    public function deleteBackup($filename)
    {
        if (!Storage::disk('backup')->exists($filename)) {
            return back()->with('error', 'Backup file not found');
        }

        Storage::disk('backup')->delete($filename);

        return back()->with('success', 'Backup deleted successfully');
    }

    /**
     * Display logs page
     */
    public function logs()
    {
        $logFiles = Storage::disk('logs')->files();
        $logFiles = array_filter($logFiles, function($file) {
            return pathinfo($file, PATHINFO_EXTENSION) === 'log';
        });

        $logData = [];
        foreach ($logFiles as $log) {
            $logData[] = [
                'name' => basename($log),
                'size' => Storage::disk('logs')->size($log),
                'last_modified' => Storage::disk('logs')->lastModified($log),
            ];
        }

        // Sort logs by last modified (newest first)
        usort($logData, function($a, $b) {
            return $b['last_modified'] <=> $a['last_modified'];
        });

        return view('settings.logs', compact('logData'));
    }

    /**
     * View a log file
     */
    public function viewLog($filename)
    {
        if (!Storage::disk('logs')->exists($filename)) {
            return back()->with('error', 'Log file not found');
        }

        $content = Storage::disk('logs')->get($filename);

        return view('settings.log-viewer', compact('content', 'filename'));
    }

    /**
     * Download a log file
     */
    public function downloadLog($filename)
    {
        if (!Storage::disk('logs')->exists($filename)) {
            return back()->with('error', 'Log file not found');
        }

        $filePath = Storage::disk('logs')->path($filename);

        return response()->download($filePath);
    }

    /**
     * Clear the settings cache
     */
    private function clearSettingsCache()
    {
        Cache::forget('settings');
    }

    /**
     * Get system memory info
     */
    private function getSystemMemoryInfo()
    {
        if (function_exists('shell_exec') && strtolower(PHP_OS) === 'linux') {
            $meminfo = shell_exec('cat /proc/meminfo');
            $meminfo = explode("\n", $meminfo);
            $meminfo = array_filter($meminfo);

            $memory = [];
            foreach ($meminfo as $line) {
                list($key, $val) = explode(':', $line);
                $memory[trim($key)] = intval(trim(explode(' ', trim($val))[0]));
            }

            return $memory;
        }

        return [];
    }

    /**
     * Format bytes to human readable format
     */
    private function formatBytes($bytes, $precision = 2)
    {
        $units = ['B', 'KB', 'MB', 'GB', 'TB'];

        $bytes = max($bytes, 0);
        $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
        $pow = min($pow, count($units) - 1);

        $bytes /= (1 << (10 * $pow));

        return round($bytes, $precision) . ' ' . $units[$pow];
    }
}

app\Http\Controllers\SurveyController.php:
<?php

namespace App\Http\Controllers;

use App\Models\Survey;
use App\Models\Project;
use App\Models\User;
use App\Models\SurveyPhoto;
use App\Notifications\SurveyAssigned;
use App\Events\NewSurveyAssigned;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Notification;
use Intervention\Image\Facades\Image;
use Illuminate\Routing\Controllers\HasMiddleware;
use Illuminate\Routing\Controllers\Middleware;

class SurveyController extends Controller implements HasMiddleware
{
    // [LARAVEL 12+] Definisikan middleware secara static
    public static function middleware(): array
    {
        return [
            new Middleware(['auth']),
            // Jika ingin spesifik role, aktifkan:
            // new Middleware(['role:admin|manager|marketing|surveyor']),
        ];
    }

    public function index(Request $request)
    {
        $query = Survey::with(['project.client', 'surveyor']);

        // Filter by role
        if (Auth::user()->hasRole('surveyor')) {
            $query->where('surveyor_id', Auth::id());
        } elseif (Auth::user()->hasRole('marketing')) {
            $query->whereHas('project', function($q) {
                $q->where('pic_id', Auth::id());
            });
        }

        // Search
        if ($request->has('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->whereHas('project', function($q) use ($search) {
                    $q->where('name', 'like', "%{$search}%")
                      ->orWhere('code', 'like', "%{$search}%");
                })->orWhereHas('project.client', function($q) use ($search) {
                    $q->where('name', 'like', "%{$search}%");
                });
            });
        }

        // Filter by status
        if ($request->has('status') && $request->status != '') {
            $query->where('status', $request->status);
        }

        // Filter by date
        if ($request->has('date') && $request->date != '') {
            $query->whereDate('scheduled_date', $request->date);
        }

        $surveys = $query->latest('scheduled_date')->paginate(10);

        return view('surveys.index', compact('surveys'));
    }

    public function create(Request $request)
    {
        // If surveyor, redirect to mobile form
        if (Auth::user()->hasRole('surveyor') && !Auth::user()->hasRole('admin')) {
            return redirect()->route('surveys.mobile.form');
        }

        $projects = Project::with('client')
                          ->whereIn('status', ['lead', 'survey'])
                          ->orderBy('name')
                          ->get();

        $surveyors = User::role('surveyor')->get();

        // Pre-select project if provided
        $selectedProject = $request->project_id ? Project::find($request->project_id) : null;

        return view('surveys.create', compact('projects', 'surveyors', 'selectedProject'));
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'project_id' => 'required|exists:projects,id',
            'surveyor_id' => 'required|exists:users,id',
            'scheduled_date' => 'required|date|after_or_equal:today',
            'notes' => 'nullable|string'
        ]);

        $validated['status'] = 'pending';

        DB::beginTransaction();
        try {
            $survey = Survey::create($validated);

            // Update project status to survey if still lead
            $project = Project::find($validated['project_id']);
            if ($project->status == 'lead') {
                $project->update(['status' => 'survey']);
            }

            // Send notification to surveyor
            $survey->surveyor->notify(new SurveyAssigned($survey, Auth::user()));

            // Also notify admin and managers
            $adminAndManagers = User::role(['admin', 'manager'])->get();
            Notification::send($adminAndManagers, new SurveyAssigned($survey, Auth::user()));

            DB::commit();

            return redirect()->route('surveys.show', $survey)
                ->with('success', 'Survey berhasil dijadwalkan!');

        } catch (\Exception $e) {
            DB::rollback();
            return back()->with('error', 'Terjadi kesalahan: ' . $e->getMessage())
                        ->withInput();
        }
    }

    public function show(Survey $survey)
    {
        // Check authorization
        if (Auth::user()->hasRole('surveyor') && $survey->surveyor_id != Auth::id()) {
            abort(403, 'Unauthorized');
        }

        if (Auth::user()->hasRole('marketing') && $survey->project->pic_id != Auth::id()) {
            abort(403, 'Unauthorized');
        }

        $survey->load(['project.client', 'surveyor', 'photos']);
        $surveyors = User::role('surveyor')->where('is_active', true)->get();

        return view('surveys.show', compact('survey', 'surveyors'));
    }

    public function edit(Survey $survey)
    {
        // Only allow edit if pending
        if ($survey->status != 'pending') {
            return back()->with('error', 'Survey yang sudah dimulai tidak dapat diedit.');
        }

        // Check authorization
        if (!Auth::user()->hasRole('admin') && !Auth::user()->hasRole('marketing')) {
            abort(403, 'Unauthorized');
        }

        $projects = Project::with('client')->orderBy('name')->get();
        $surveyors = User::role('surveyor')->get();

        return view('surveys.edit', compact('survey', 'projects', 'surveyors'));
    }

    public function update(Request $request, Survey $survey)
    {
        // Only allow update if pending
        if ($survey->status != 'pending') {
            return back()->with('error', 'Survey yang sudah dimulai tidak dapat diubah.');
        }

        $validated = $request->validate([
            'project_id' => 'required|exists:projects,id',
            'surveyor_id' => 'required|exists:users,id',
            'scheduled_date' => 'required|date',
            'notes' => 'nullable|string'
        ]);

        $survey->update($validated);

        return redirect()->route('surveys.show', $survey)
            ->with('success', 'Survey berhasil diupdate!');
    }

    public function destroy(Survey $survey)
    {
        // Only admin can delete
        if (!Auth::user()->hasRole('admin')) {
            abort(403, 'Unauthorized');
        }

        // Check if survey has been started
        if ($survey->status != 'pending') {
            return back()->with('error', 'Survey yang sudah dimulai tidak dapat dihapus.');
        }

        $survey->delete();

        return redirect()->route('surveys.index')
            ->with('success', 'Survey berhasil dihapus!');
    }

    // Mobile specific methods
    public function mobileForm(Request $request)
    {
        // Check if user is surveyor
        if (!Auth::user()->hasRole('surveyor') && !Auth::user()->hasRole('admin')) {
            abort(403, 'Unauthorized');
        }

        // Get pending surveys for this surveyor
        $pendingSurveys = Survey::with(['project.client'])
                               ->where('surveyor_id', Auth::id())
                               ->where('status', 'pending')
                               ->whereDate('scheduled_date', '<=', now())
                               ->orderBy('scheduled_date')
                               ->get();

        // If survey_id provided, load that survey
        $survey = null;
        if ($request->has('survey_id')) {
            $survey = Survey::with(['project.client'])
                           ->where('id', $request->survey_id)
                           ->where('surveyor_id', Auth::id())
                           ->first();

            if (!$survey) {
                abort(404);
            }
        }

        return view('surveys.mobile.form', compact('pendingSurveys', 'survey'));
    }

    public function submitMobile(Request $request, Survey $survey)
    {
        // Validate survey belongs to this surveyor
        if ($survey->surveyor_id != Auth::id()) {
            abort(403, 'Unauthorized');
        }

        $validated = $request->validate([
            'latitude' => 'required|numeric',
            'longitude' => 'required|numeric',
            'address' => 'required|string',
            'electricity' => 'required|in:yes,no',
            'electricity_notes' => 'nullable|string',
            'water' => 'required|in:yes,no',
            'water_notes' => 'nullable|string',
            'road_access' => 'required|in:easy,medium,difficult',
            'permit_status' => 'required|in:complete,process,none',
            'existing_condition' => 'required|in:good,medium,bad,empty',
            'area_size' => 'required|numeric|min:0',
            'notes' => 'nullable|string',
            'photos.*' => 'image|max:10240' // 10MB max per photo
        ]);

        DB::beginTransaction();
        try {
            // Update survey data
            $survey->update([
                'latitude' => $validated['latitude'],
                'longitude' => $validated['longitude'],
                'address' => $validated['address'],
                'actual_date' => now(),
                'status' => 'completed',
                'notes' => $validated['notes'],
                'checklist_data' => [
                    'electricity' => $validated['electricity'],
                    'electricity_notes' => $validated['electricity_notes'],
                    'water' => $validated['water'],
                    'water_notes' => $validated['water_notes'],
                    'road_access' => $validated['road_access'],
                    'permit_status' => $validated['permit_status'],
                    'existing_condition' => $validated['existing_condition'],
                    'area_size' => $validated['area_size']
                ]
            ]);

            // Handle photo uploads
            if ($request->hasFile('photos')) {
                foreach ($request->file('photos') as $index => $photo) {
                    // Generate filename
                    $filename = 'survey_' . $survey->id . '_' . time() . '_' . $index . '.' . $photo->extension();

                    // Store original
                    $path = $photo->storeAs('surveys/' . $survey->id, $filename, 'public');

                    // Create thumbnail
                    $thumbnailPath = 'surveys/' . $survey->id . '/thumb_' . $filename;
                    $image = Image::make($photo);
                    $image->fit(300, 300);
                    Storage::disk('public')->put($thumbnailPath, $image->stream());

                    // Save to database
                    SurveyPhoto::create([
                        'survey_id' => $survey->id,
                        'filename' => $filename,
                        'path' => $path,
                        'thumbnail_path' => $thumbnailPath,
                        'order' => $index + 1
                    ]);
                }
            }

            // Update project status if needed
            $project = $survey->project;
            if ($project->status == 'survey') {
                $project->update(['status' => 'penawaran']);
            }

            DB::commit();

            return redirect()->route('surveys.show', $survey)
                ->with('success', 'Survey berhasil diselesaikan!');

        } catch (\Exception $e) {
            DB::rollback();
            return back()->with('error', 'Terjadi kesalahan: ' . $e->getMessage())
                        ->withInput();
        }
    }

    public function uploadPhotos(Request $request, Survey $survey)
    {
        // Validate
        $request->validate([
            'photos.*' => 'required|image|max:10240'
        ]);

        $uploadedCount = 0;

        foreach ($request->file('photos') as $photo) {
            $filename = 'survey_' . $survey->id . '_' . uniqid() . '.' . $photo->extension();
            $path = $photo->storeAs('surveys/' . $survey->id, $filename, 'public');

            SurveyPhoto::create([
                'survey_id' => $survey->id,
                'filename' => $filename,
                'path' => $path,
                'order' => $survey->photos()->max('order') + 1
            ]);

            $uploadedCount++;
        }

        return response()->json([
            'success' => true,
            'message' => $uploadedCount . ' foto berhasil diupload'
        ]);
    }

    public function assignSurvey(Request $request, Survey $survey, User $user)
    {
        // Validasi apakah user yang login berhak melakukan assignment
        // Misalnya, hanya admin atau manager yang boleh assign survey
        if (!Auth::user()->hasRole(['admin', 'manager'])) {
            return back()->with('error', 'Anda tidak memiliki izin untuk melakukan tindakan ini.');
        }

        // Logic untuk assign survey ke user
        $survey->update([
            'assigned_to' => $user->id,
            'status' => 'assigned', // Update status survey jika diperlukan
            'assigned_at' => now()  // Simpan waktu assignment jika diperlukan
        ]);

        // Broadcast event
        event(new NewSurveyAssigned($survey, $user));

        return back()->with('success', 'Survey berhasil ditetapkan kepada ' . $user->name);
    }
}

app\Http\Controllers\TestController.php:
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Client;
use Illuminate\Support\Facades\Auth;
use App\Notifications\NewClientAssigned;

class TestController extends Controller
{
    public function testNotification()
    {
        $client = Client::first(); // Or create a dummy client if none exists
        Auth::user()->notify(new NewClientAssigned($client, Auth::user()));

        return response()->json(['message' => 'Test notification sent']);
    }
}

app\Http\Controllers\UserController.php:
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Storage;
use Spatie\Permission\Models\Role;

class UserController extends Controller
{
    /**
     * Display a listing of the users.
     */
    public function index(Request $request)
    {
        $query = User::with('roles');

        // Search filter
        if($request->filled('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('name', 'like', "%{$search}%")
                  ->orWhere('email', 'like', "%{$search}%");
            });
        }

        // Role filter
        if($request->filled('role')) {
            $query->whereHas('roles', function($q) use ($request) {
                $q->where('name', $request->role);
            });
        }

        // Status filter
        if($request->filled('status')) {
            $query->where('is_active', $request->status === 'active' ? 1 : 0);
        }

        $users = $query->orderBy('created_at', 'desc')->paginate(10);
        $roles = Role::all();

        return view('users.index', compact('users', 'roles'));
    }

    /**
     * Show the form for creating a new user.
     */
    public function create()
    {
        $roles = Role::all();
        return view('users.create', compact('roles'));
    }

    /**
     * Store a newly created user in storage.
     */
    public function store(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
            'role' => 'required|exists:roles,name',
            'avatar' => 'nullable|image|max:2048',
            'phone' => 'nullable|string|max:20',
            'address' => 'nullable|string'
        ]);

        $user = new User();
        $user->name = $request->name;
        $user->email = $request->email;
        $user->password = Hash::make($request->password);
        $user->phone = $request->phone;
        $user->address = $request->address;
        $user->is_active = $request->has('is_active') ? 1 : 0;

        // Handle avatar upload
        if($request->hasFile('avatar')) {
            $avatarPath = $request->file('avatar')->store('avatars', 'public');
            $user->avatar = $avatarPath;
        }

        $user->save();

        // Assign role
        $user->assignRole($request->role);

        return redirect()->route('users.index')->with('success', 'User created successfully.');
    }

    /**
     * Display the specified user.
     */
    public function show(User $user)
    {
        return view('users.show', compact('user'));
    }

    /**
     * Show the form for editing the specified user.
     */
    public function edit(User $user)
    {
        $roles = Role::all();
        return view('users.edit', compact('user', 'roles'));
    }

    /**
     * Update the specified user in storage.
     */
    public function update(Request $request, User $user)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users,email,' . $user->id,
            'role' => 'required|exists:roles,name',
            'avatar' => 'nullable|image|max:2048',
            'phone' => 'nullable|string|max:20',
            'address' => 'nullable|string'
        ]);

        $user->name = $request->name;
        $user->email = $request->email;
        $user->phone = $request->phone;
        $user->address = $request->address;
        $user->is_active = $request->has('is_active') ? 1 : 0;

        // Handle avatar upload
        if($request->hasFile('avatar')) {
            // Delete old avatar if exists
            if($user->avatar) {
                Storage::disk('public')->delete($user->avatar);
            }

            $avatarPath = $request->file('avatar')->store('avatars', 'public');
            $user->avatar = $avatarPath;
        }

        $user->save();

        // Update role
        $user->syncRoles([$request->role]);

        return redirect()->route('users.index')->with('success', 'User updated successfully.');
    }

    /**
     * Remove the specified user from storage.
     */
    public function destroy(User $user)
    {
        // Prevent self-deletion
        if(Auth::id() === $user->id) {
            return back()->with('error', 'You cannot delete your own account.');
        }

        // Delete avatar if exists
        if($user->avatar) {
            Storage::disk('public')->delete($user->avatar);
        }

        $user->delete();

        return redirect()->route('users.index')->with('success', 'User deleted successfully.');
    }

    /**
     * Toggle user active status.
     */
    public function toggleActive(User $user)
    {
        // Prevent self-deactivation
        if(Auth::id() === $user->id) {
            return back()->with('error', 'You cannot change your own status.');
        }

        $user->is_active = !$user->is_active;
        $user->save();

        $status = $user->is_active ? 'activated' : 'deactivated';

        return back()->with('success', "User {$status} successfully.");
    }

    /**
     * Display the user's profile.
     */
    public function profile()
    {
        $user = Auth::user();
        return view('users.profile', compact('user'));
    }

    /**
     * Update the user's profile information.
     */
    public function updateProfile(Request $request)
    {
        $user = Auth::user();

        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|email|unique:users,email,' . $user->id,
            'avatar' => 'nullable|image|max:2048',
            'phone' => 'nullable|string|max:20',
            'address' => 'nullable|string'
        ]);

        $user->name = $request->name;
        $user->email = $request->email;
        $user->phone = $request->phone;
        $user->address = $request->address;

        // Handle avatar upload
        if($request->hasFile('avatar')) {
            // Delete old avatar if exists
            if($user->avatar) {
                Storage::disk('public')->delete($user->avatar);
            }

            $avatarPath = $request->file('avatar')->store('avatars', 'public');
            $user->avatar = $avatarPath;
        }

        $user->save();

        return back()->with('success', 'Profile updated successfully.');
    }

    /**
     * Update the user's password.
     */
    public function updatePassword(Request $request)
    {
        $user = Auth::user();

        $request->validate([
            'current_password' => 'required|current_password',
            'password' => 'required|string|min:8|confirmed',
        ]);

        $user->password = Hash::make($request->password);
        $user->save();

        return back()->with('success', 'Password updated successfully.');
    }
}

app\Http\Controllers\Auth\AuthenticatedSessionController.php:
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\LoginRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;

class AuthenticatedSessionController extends Controller
{
    /**
     * Display the login view.
     */
    public function create(): View
    {
        return view('auth.login');
    }

    /**
     * Handle an incoming authentication request.
     */
    public function store(LoginRequest $request): RedirectResponse
    {
        $request->authenticate();

        $request->session()->regenerate();

        return redirect()->intended(route('dashboard', absolute: false));
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): RedirectResponse
    {
        Auth::guard('web')->logout();

        $request->session()->invalidate();

        $request->session()->regenerateToken();

        return redirect('/');
    }
}

app\Http\Controllers\Auth\ConfirmablePasswordController.php:
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;
use Illuminate\View\View;

class ConfirmablePasswordController extends Controller
{
    /**
     * Show the confirm password view.
     */
    public function show(): View
    {
        return view('auth.confirm-password');
    }

    /**
     * Confirm the user's password.
     */
    public function store(Request $request): RedirectResponse
    {
        if (! Auth::guard('web')->validate([
            'email' => $request->user()->email,
            'password' => $request->password,
        ])) {
            throw ValidationException::withMessages([
                'password' => __('auth.password'),
            ]);
        }

        $request->session()->put('auth.password_confirmed_at', time());

        return redirect()->intended(route('dashboard', absolute: false));
    }
}

app\Http\Controllers\Auth\EmailVerificationNotificationController.php:
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;

class EmailVerificationNotificationController extends Controller
{
    /**
     * Send a new email verification notification.
     */
    public function store(Request $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard', absolute: false));
        }

        $request->user()->sendEmailVerificationNotification();

        return back()->with('status', 'verification-link-sent');
    }
}

app\Http\Controllers\Auth\LoginController.php:
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class LoginController extends Controller
{
    public function showLoginForm()
    {
        return view('auth.login');
    }

    public function login(Request $request)
    {
        $credentials = $request->validate([
            'email' => 'required|email',
            'password' => 'required'
        ]);

        if (Auth::attempt($credentials, $request->remember)) {
            $request->session()->regenerate();
            
            // Check if user is active
            if (!Auth::user()->is_active) {
                Auth::logout();
                return back()->withErrors([
                    'email' => 'Akun Anda tidak aktif. Silakan hubungi administrator.',
                ]);
            }

            return redirect()->intended('dashboard');
        }

        return back()->withErrors([
            'email' => 'Email atau password tidak valid.',
        ])->onlyInput('email');
    }

    public function logout(Request $request)
    {
        Auth::logout();
        $request->session()->invalidate();
        $request->session()->regenerateToken();
        return redirect('/');
    }
}

app\Http\Controllers\Auth\NewPasswordController.php:
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Str;
use Illuminate\Validation\Rules;
use Illuminate\View\View;

class NewPasswordController extends Controller
{
    /**
     * Display the password reset view.
     */
    public function create(Request $request): View
    {
        return view('auth.reset-password', ['request' => $request]);
    }

    /**
     * Handle an incoming new password request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'token' => ['required'],
            'email' => ['required', 'email'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        // Here we will attempt to reset the user's password. If it is successful we
        // will update the password on an actual user model and persist it to the
        // database. Otherwise we will parse the error and return the response.
        $status = Password::reset(
            $request->only('email', 'password', 'password_confirmation', 'token'),
            function (User $user) use ($request) {
                $user->forceFill([
                    'password' => Hash::make($request->password),
                    'remember_token' => Str::random(60),
                ])->save();

                event(new PasswordReset($user));
            }
        );

        // If the password was successfully reset, we will redirect the user back to
        // the application's home authenticated view. If there is an error we can
        // redirect them back to where they came from with their error message.
        return $status == Password::PASSWORD_RESET
                    ? redirect()->route('login')->with('status', __($status))
                    : back()->withInput($request->only('email'))
                        ->withErrors(['email' => __($status)]);
    }
}

app\Http\Controllers\Auth\PasswordController.php:
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules\Password;

class PasswordController extends Controller
{
    /**
     * Update the user's password.
     */
    public function update(Request $request): RedirectResponse
    {
        $validated = $request->validateWithBag('updatePassword', [
            'current_password' => ['required', 'current_password'],
            'password' => ['required', Password::defaults(), 'confirmed'],
        ]);

        $request->user()->update([
            'password' => Hash::make($validated['password']),
        ]);

        return back()->with('status', 'password-updated');
    }
}

app\Http\Controllers\Auth\PasswordResetLinkController.php:
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Password;
use Illuminate\View\View;

class PasswordResetLinkController extends Controller
{
    /**
     * Display the password reset link request view.
     */
    public function create(): View
    {
        return view('auth.forgot-password');
    }

    /**
     * Handle an incoming password reset link request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'email' => ['required', 'email'],
        ]);

        // We will send the password reset link to this user. Once we have attempted
        // to send the link, we will examine the response then see the message we
        // need to show to the user. Finally, we'll send out a proper response.
        $status = Password::sendResetLink(
            $request->only('email')
        );

        return $status == Password::RESET_LINK_SENT
                    ? back()->with('status', __($status))
                    : back()->withInput($request->only('email'))
                        ->withErrors(['email' => __($status)]);
    }
}

app\Http\Controllers\Auth\RegisteredUserController.php:
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules;
use Illuminate\View\View;

class RegisteredUserController extends Controller
{
    /**
     * Display the registration view.
     */
    public function create(): View
    {
        return view('auth.register');
    }

    /**
     * Handle an incoming registration request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'lowercase', 'email', 'max:255', 'unique:'.User::class],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        event(new Registered($user));

        Auth::login($user);

        return redirect(route('dashboard', absolute: false));
    }
}

app\Http\Controllers\Auth\VerifyEmailController.php:
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Auth\EmailVerificationRequest;
use Illuminate\Http\RedirectResponse;

class VerifyEmailController extends Controller
{
    /**
     * Mark the authenticated user's email address as verified.
     */
    public function __invoke(EmailVerificationRequest $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
        }

        if ($request->user()->markEmailAsVerified()) {
            event(new Verified($request->user()));
        }

        return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
    }
}

app\Http\Middleware\LogUserActivity.php:
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class LogUserActivity
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        if (Auth::check()) {
            $user = Auth::user();

            // Check if user is active
            if (!$user->is_active) {
                Auth::logout();

                $request->session()->invalidate();
                $request->session()->regenerateToken();

                return redirect()->route('login')
                    ->with('error', 'Your account has been deactivated. Please contact an administrator.');
            }
        }

        return $next($request);
    }
}

app\Http\Requests\ProfileUpdateRequest.php:
<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class ProfileUpdateRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\Rule|array|string>
     */
    public function rules(): array
    {
        return [
            'name' => ['required', 'string', 'max:255'],
            'email' => [
                'required',
                'string',
                'email',
                'max:255',
                Rule::unique('users')->ignore($this->user()->id),
            ],
        ];
    }
}

app\Http\Requests\ProjectRequest.php:
<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class ProjectRequest extends FormRequest
{
    public function authorize()
    {
        return true;
    }

    public function rules()
    {
        return [
            'name' => 'required|string|max:255',
            'type' => 'required|in:kantor,showroom,kafe,restoran,outlet,other',
            'location' => 'required|string',
            'client_id' => 'required|exists:clients,id',
            'pic_id' => 'required|exists:users,id',
            'status' => 'sometimes|required|in:lead,survey,penawaran,negosiasi,deal,eksekusi,selesai,batal',
            'project_value' => 'nullable|numeric|min:0',
            'deal_value' => 'nullable|numeric|min:0',
            'start_date' => 'nullable|date',
            'target_date' => 'nullable|date|after_or_equal:start_date',
            'description' => 'nullable|string'
        ];
    }

    public function messages()
    {
        return [
            'name.required' => 'Nama project harus diisi',
            'type.required' => 'Jenis project harus dipilih',
            'location.required' => 'Lokasi project harus diisi',
            'client_id.required' => 'Klien harus dipilih',
            'pic_id.required' => 'PIC harus dipilih',
            'target_date.after_or_equal' => 'Target selesai harus setelah tanggal mulai'
        ];
    }
}

app\Http\Kernel.php:
<?php

namespace App\Http;

use Illuminate\Foundation\Http\Kernel as HttpKernel;

class Kernel extends HttpKernel
{
    /**
     * The application's global HTTP middleware stack.
     *
     * These middleware are run during every request to your application.
     *
     * @var array<int, class-string|string>
     */
    protected $middleware = [
        // \App\Http\Middleware\TrustHosts::class,
        \App\Http\Middleware\TrustProxies::class,
        \Illuminate\Http\Middleware\HandleCors::class,
        \App\Http\Middleware\PreventRequestsDuringMaintenance::class,
        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
        \App\Http\Middleware\TrimStrings::class,
        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
    ];

    /**
     * The application's route middleware groups.
     *
     * @var array<string, array<int, class-string|string>>
     */
    protected $middlewareGroups = [
        'web' => [
            \App\Http\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \App\Http\Middleware\VerifyCsrfToken::class,
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
            \App\Http\Middleware\LogUserActivity::class, // Add your middleware here
        ],

        'api' => [
            // \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
            \Illuminate\Routing\Middleware\ThrottleRequests::class.':api',
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],
    ];

    /**
     * The application's middleware aliases.
     *
     * Aliases may be used instead of class names to conveniently assign middleware to routes and groups.
     *
     * @var array<string, class-string|string>
     */
    protected $middlewareAliases = [
        'auth' => \App\Http\Middleware\Authenticate::class,
        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'auth.session' => \Illuminate\Session\Middleware\AuthenticateSession::class,
        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can' => \Illuminate\Auth\Middleware\Authorize::class,
        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
        'password.confirm' => \Illuminate\Auth\Middleware\RequirePassword::class,
        'precognitive' => \Illuminate\Foundation\Http\Middleware\HandlePrecognitiveRequests::class,
        'signed' => \App\Http\Middleware\ValidateSignature::class,
        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
    ];
}

app\Models\Client.php:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Client extends Model
{
    use HasFactory;

    protected $fillable = [
        'name', 'email', 'phone', 'whatsapp', 'address',
        'status', 'pic_id', 'source', 'source_detail', 'notes'
    ];

    // Relationships
    public function projects()
    {
        return $this->hasMany(Project::class);
    }

    public function pic()
    {
        return $this->belongsTo(User::class, 'pic_id');
    }

    // Accessors
    public function getStatusBadgeAttribute()
    {
        $badges = [
            'prospek' => 'warning',
            'aktif' => 'success',
            'selesai' => 'secondary'
        ];

        return $badges[$this->status] ?? 'secondary';
    }

    // Scopes
    public function scopeActive($query)
    {
        return $query->where('status', 'aktif');
    }

    public function scopeSearch($query, $search)
    {
        return $query->where(function ($q) use ($search) {
            $q->where('name', 'like', "%{$search}%")
              ->orWhere('email', 'like', "%{$search}%")
              ->orWhere('phone', 'like', "%{$search}%");
        });
    }
}

app\Models\Document.php:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;

class Document extends Model
{
    use HasFactory;

    protected $fillable = [
        'name', 'original_name', 'category', 'type', 'description',
        'path', 'size', 'extension', 'uploaded_by', 'is_public',
        'views', 'downloads'
    ];

    protected $casts = [
        'is_public' => 'boolean',
        'size' => 'integer',
        'views' => 'integer',
        'downloads' => 'integer'
    ];

    // Relationships
    public function documentable()
    {
        return $this->morphTo();
    }

    public function uploadedBy()
    {
        return $this->belongsTo(User::class, 'uploaded_by');
    }

    // Accessors
    public function getUrlAttribute()
    {
        return Storage::url($this->path);
    }

    public function getFormattedSizeAttribute()
    {
        $bytes = $this->size;
        $units = ['B', 'KB', 'MB', 'GB'];
        
        for ($i = 0; $bytes > 1024; $i++) {
            $bytes /= 1024;
        }
        
        return round($bytes, 2) . ' ' . $units[$i];
    }

    public function getCategoryBadgeAttribute()
    {
        $badges = [
            'penawaran' => 'primary',
            'kontrak' => 'success',
            'invoice' => 'warning',
            'survey' => 'info',
            'design' => 'secondary',
            'progress' => 'dark',
            'other' => 'light'
        ];
        
        return $badges[$this->category] ?? 'secondary';
    }

    public function getIconAttribute()
    {
        $icons = [
            'pdf' => 'bi-file-pdf',
            'image' => 'bi-file-image',
            'word' => 'bi-file-word',
            'excel' => 'bi-file-excel',
            'powerpoint' => 'bi-file-ppt',
            'archive' => 'bi-file-zip',
            'video' => 'bi-file-play',
            'audio' => 'bi-file-music',
            'other' => 'bi-file-earmark'
        ];
        
        return $icons[$this->type] ?? 'bi-file-earmark';
    }

    // Scopes
    public function scopePublic($query)
    {
        return $query->where('is_public', true);
    }

    public function scopeByCategory($query, $category)
    {
        return $query->where('category', $category);
    }

    public function scopeByType($query, $type)
    {
        return $query->where('type', $type);
    }

    // Delete file when model is deleted
    protected static function boot()
    {
        parent::boot();
        
        static::deleting(function ($document) {
            Storage::disk('public')->delete($document->path);
        });
    }
}

app\Models\ModelName.php:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class ModelName extends Model
{
    //
}


app\Models\PipelineStage.php:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class PipelineStage extends Model
{
    //
}


app\Models\Project.php:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Project extends Model
{
    use HasFactory;

    protected $fillable = [
        'code', 'name', 'type', 'location', 'start_date', 'target_date',
        'status', 'project_value', 'deal_value', 'client_id', 'pic_id', 'description'
    ];

    protected $casts = [
        'start_date' => 'date',
        'target_date' => 'date',
        'project_value' => 'decimal:2',
        'deal_value' => 'decimal:2',
    ];

    protected static function boot()
    {
        parent::boot();

        static::creating(function ($model) {
            $model->code = 'PRJ-' . date('Y') . '-' . str_pad(Project::whereYear('created_at', date('Y'))->count() + 1, 3, '0', STR_PAD_LEFT);
        });
    }

    // Relationships
    public function client()
    {
        return $this->belongsTo(Client::class);
    }

    public function pic()
    {
        return $this->belongsTo(User::class, 'pic_id');
    }

    public function surveys()
    {
        return $this->hasMany(Survey::class);
    }

    public function latestSurvey()
    {
        return $this->hasOne(Survey::class)->latest();
    }

    // Accessors
    public function getStatusBadgeAttribute()
    {
        $badges = [
            'lead' => 'secondary',
            'survey' => 'info',
            'penawaran' => 'warning',
            'negosiasi' => 'primary',
            'deal' => 'success',
            'eksekusi' => 'primary',
            'selesai' => 'success',
            'batal' => 'danger'
        ];

        return $badges[$this->status] ?? 'secondary';
    }

    public function getProgressPercentageAttribute()
    {
        $percentages = [
            'lead' => 10,
            'survey' => 25,
            'penawaran' => 40,
            'negosiasi' => 60,
            'deal' => 75,
            'eksekusi' => 90,
            'selesai' => 100,
            'batal' => 0
        ];

        return $percentages[$this->status] ?? 0;
    }

    public function documents()
    {
        return $this->hasMany(Document::class);
        return $this->morphMany(Document::class, 'documentable');
    }

    public function pipelineHistory()
    {
        return $this->hasMany(ProjectPipeline::class);
    }
    
}

app\Models\ProjectPipeline.php:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class ProjectPipeline extends Model
{
    use HasFactory;

    protected $fillable = [
        'project_id',
        'from_status',
        'to_status',
        'changed_by',
        'changed_at',
        'notes',
    ];

    protected $casts = [
        'changed_at' => 'datetime',
    ];

    public function project()
    {
        return $this->belongsTo(Project::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class, 'changed_by');
    }
}


app\Models\Setting.php:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Cache;

class Setting extends Model
{
    use HasFactory;

    protected $fillable = [
        'key', 'value', 'group', 'type'
    ];

    /**
     * Get a setting value by key
     */
    public static function get($key, $default = null)
    {
        $setting = self::where('key', $key)->first();

        if (!$setting) {
            return $default;
        }

        return self::formatValue($setting->value, $setting->type);
    }

    /**
     * Get all settings as an array
     */
    public static function getAllSettings()
    {
        return Cache::remember('settings', 60 * 24, function () {
            $settings = self::all();

            $formattedSettings = [];
            foreach ($settings as $setting) {
                $formattedSettings[$setting->key] = self::formatValue($setting->value, $setting->type);
            }

            return $formattedSettings;
        });
    }

    /**
     * Format the value based on type
     */
    private static function formatValue($value, $type)
    {
        switch ($type) {
            case 'boolean':
                return (bool) $value;
            case 'integer':
                return (int) $value;
            case 'float':
                return (float) $value;
            case 'array':
                return json_decode($value, true);
            case 'object':
                return json_decode($value);
            default:
                return $value;
        }
    }
}


app\Models\Survey.php:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Survey extends Model
{
    use HasFactory;

    protected $fillable = [
        'project_id', 'surveyor_id', 'scheduled_date', 'actual_date',
        'status', 'latitude', 'longitude', 'address', 'notes', 'checklist_data'
    ];

    protected $casts = [
        'scheduled_date' => 'datetime',
        'actual_date' => 'datetime',
        'checklist_data' => 'array',
        'latitude' => 'decimal:8',
        'longitude' => 'decimal:8',
    ];

    // Relationships
    public function project()
    {
        return $this->belongsTo(Project::class);
    }

    public function surveyor()
    {
        return $this->belongsTo(User::class, 'surveyor_id');
    }

    public function photos()
    {
        return $this->hasMany(SurveyPhoto::class);
    }

    // Accessors
    public function getStatusBadgeAttribute()
    {
        $badges = [
            'pending' => 'warning',
            'in_progress' => 'info',
            'completed' => 'success',
            'cancelled' => 'danger'
        ];

        return $badges[$this->status] ?? 'secondary';
    }

    // Scopes
    public function scopePending($query)
    {
        return $query->where('status', 'pending');
    }

    public function scopeForSurveyor($query, $surveyorId)
    {
        return $query->where('surveyor_id', $surveyorId);
    }
    public function getChecklistDataAttribute($value)
    {
        return json_decode($value, true) ?? [];
    }

    public function setChecklistDataAttribute($value)
    {
        $this->attributes['checklist_data'] = json_encode($value);
    }

    // Add this accessor for formatted checklist
    public function getFormattedChecklistAttribute()
    {
        $data = $this->checklist_data;
        
        return [
            'electricity' => [
                'value' => $data['electricity'] ?? null,
                'label' => $data['electricity'] == 'yes' ? 'Ada' : 'Tidak Ada',
                'notes' => $data['electricity_notes'] ?? null
            ],
            'water' => [
                'value' => $data['water'] ?? null,
                'label' => $data['water'] == 'yes' ? 'Ada' : 'Tidak Ada',
                'notes' => $data['water_notes'] ?? null
            ],
            'road_access' => [
                'value' => $data['road_access'] ?? null,
                'label' => $this->getRoadAccessLabel($data['road_access'] ?? null),
                'notes' => null
            ],
            'permit_status' => [
                'value' => $data['permit_status'] ?? null,
                'label' => $this->getPermitStatusLabel($data['permit_status'] ?? null),
                'notes' => null
            ],
            'existing_condition' => [
                'value' => $data['existing_condition'] ?? null,
                'label' => $this->getExistingConditionLabel($data['existing_condition'] ?? null),
                'notes' => null
            ],
            'area_size' => [
                'value' => $data['area_size'] ?? null,
                'label' => ($data['area_size'] ?? 0) . ' m²',
                'notes' => null
            ]
        ];
    }

    private function getRoadAccessLabel($value)
    {
        $labels = [
            'easy' => 'Mudah - Mobil besar bisa masuk',
            'medium' => 'Sedang - Hanya mobil kecil',
            'difficult' => 'Sulit - Hanya motor/jalan kaki'
        ];
        
        return $labels[$value] ?? '-';
    }

    private function getPermitStatusLabel($value)
    {
        $labels = [
            'complete' => 'Lengkap',
            'process' => 'Dalam Proses',
            'none' => 'Belum Ada'
        ];
        
        return $labels[$value] ?? '-';
    }

    private function getExistingConditionLabel($value)
    {
        $labels = [
            'good' => 'Baik',
            'medium' => 'Sedang',
            'bad' => 'Buruk',
            'empty' => 'Tanah Kosong'
        ];
        
        return $labels[$value] ?? '-';
    }

}

app\Models\SurveyPhoto.php:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;

class SurveyPhoto extends Model
{
    use HasFactory;

    protected $fillable = [
        'survey_id', 'filename', 'path', 'thumbnail_path', 'caption', 'order'
    ];

    // Relationships
    public function survey()
    {
        return $this->belongsTo(Survey::class);
    }

    // Accessors
    public function getUrlAttribute()
    {
        return Storage::url($this->path);
    }

    public function getThumbnailUrlAttribute()
    {
        return Storage::url($this->thumbnail_path ?? $this->path);
    }

    // Delete file when model is deleted
    protected static function boot()
    {
        parent::boot();
        
        static::deleting(function ($photo) {
            Storage::disk('public')->delete($photo->path);
            if ($photo->thumbnail_path) {
                Storage::disk('public')->delete($photo->thumbnail_path);
            }
        });
    }
}

app\Models\User.php:
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Spatie\Permission\Traits\HasRoles;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable, HasRoles;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'phone',
        'address',
        'avatar',
        'is_active',
        'last_login_at',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
        'is_active' => 'boolean',
        'last_login_at' => 'datetime',
    ];

    /**
     * Get the user's avatar URL.
     */
    public function getAvatarUrlAttribute()
    {
        if ($this->avatar) {
            return asset('storage/' . $this->avatar);
        }

        // Generate default avatar using UI Avatars
        $name = urlencode($this->name);
        return "https://ui-avatars.com/api/?name={$name}&background=random&color=fff";
    }

    // Relationships
    public function surveys()
    {
        return $this->hasMany(Survey::class, 'surveyor_id');
    }

    public function projects()
    {
        return $this->hasMany(Project::class, 'pic_id');
    }
}

app\Notifications\DocumentUploaded.php:
<?php

namespace App\Notifications;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;

class DocumentUploaded extends Notification
{
    use Queueable;

    /**
     * Create a new notification instance.
     */
    public function __construct()
    {
        //
    }

    /**
     * Get the notification's delivery channels.
     *
     * @return array<int, string>
     */
    public function via(object $notifiable): array
    {
        return ['mail'];
    }

    /**
     * Get the mail representation of the notification.
     */
    public function toMail(object $notifiable): MailMessage
    {
        return (new MailMessage)
            ->line('The introduction to the notification.')
            ->action('Notification Action', url('/'))
            ->line('Thank you for using our application!');
    }

    /**
     * Get the array representation of the notification.
     *
     * @return array<string, mixed>
     */
    public function toArray(object $notifiable): array
    {
        return [
            //
        ];
    }
}

app\Notifications\NewClientAssigned.php:
<?php

namespace App\Notifications;

use App\Models\Client;
use App\Models\User;
use Illuminate\Bus\Queueable;
use Illuminate\Notifications\Notification;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Messages\BroadcastMessage;

class NewClientAssigned extends Notification
{
    use Queueable;

    protected $client;
    protected $assignedBy;

    /**
     * Create a new notification instance.
     *
     * @param Client $client
     * @param User $assignedBy
     */
    public function __construct(Client $client, User $assignedBy)
    {
        $this->client = $client;
        $this->assignedBy = $assignedBy;
    }

    /**
     * Get the notification's delivery channels.
     *
     * @param  mixed  $notifiable
     * @return array
     */
    public function via($notifiable)
    {
        return ['database', 'broadcast'];
    }

    /**
     * Get the array representation of the notification.
     *
     * @param  mixed  $notifiable
     * @return array
     */
    public function toArray($notifiable)
    {
        return [
            'client_id' => $this->client->id,
            'client_name' => $this->client->name,
            'assigned_by' => $this->assignedBy->name,
            'message' => "Client baru '{$this->client->name}' telah ditambahkan"
        ];
    }

    /**
     * Get the broadcast representation of the notification.
     *
     * @param  mixed  $notifiable
     * @return BroadcastMessage
     */
    public function toBroadcast($notifiable)
    {
        return new BroadcastMessage([
            'id' => $this->client->id,
            'type' => 'client_assigned',
            'client_id' => $this->client->id,
            'client_name' => $this->client->name,
            'message' => "Client baru '{$this->client->name}' telah ditambahkan",
            'time' => now()->diffForHumans()
        ]);
    }

    /**
     * Get the mail representation of the notification.
     *
     * @param  mixed  $notifiable
     * @return MailMessage
     */
    public function toMail($notifiable)
    {
        return (new MailMessage)
            ->subject("Client baru '{$this->client->name}' telah ditambahkan")
            ->line("Client baru '{$this->client->name}' telah ditambahkan oleh {$this->assignedBy->name}.")
            ->action('View Client', url('/clients/'.$this->client->id))
            ->line('Thank you for using our application!');
    }
}

app\Notifications\ProjectStatusChanged.php:
<?php

namespace App\Notifications;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Messages\BroadcastMessage;
use Illuminate\Notifications\Notification;
use App\Models\Project;
use App\Models\User;

class ProjectStatusChanged extends Notification implements ShouldQueue
{
    use Queueable;

    protected $project;
    protected $previousStage;
    protected $currentStage;
    protected $changedBy;

    public function __construct(Project $project, $previousStage, $currentStage, User $changedBy)
    {
        $this->project = $project;
        $this->previousStage = $previousStage;
        $this->currentStage = $currentStage;
        $this->changedBy = $changedBy;
    }

    public function via($notifiable)
    {
        return ['database', 'broadcast'];
    }

    public function toArray($notifiable)
    {
        return [
            'project_id' => $this->project->id,
            'project_name' => $this->project->name,
            'project_code' => $this->project->code,
            'previous_stage' => $this->previousStage,
            'current_stage' => $this->currentStage,
            'changed_by' => $this->changedBy->name,
            'message' => "Proyek {$this->project->name} berpindah dari tahap '{$this->previousStage}' ke '{$this->currentStage}'"
        ];
    }

    public function toBroadcast($notifiable)
    {
        return new BroadcastMessage([
            'id' => $this->id,
            'type' => 'project_status_changed',
            'project_id' => $this->project->id,
            'project_name' => $this->project->name,
            'message' => "Proyek {$this->project->name} kini berada di tahap '{$this->currentStage}'",
            'time' => now()->diffForHumans(),
            'icon' => 'bi-building',
            'color' => 'primary'
        ]);
    }
}

app\Notifications\SurveyAssigned.php:
<?php

namespace App\Notifications;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Messages\BroadcastMessage;
use Illuminate\Notifications\Notification;
use App\Models\Survey;
use App\Models\User;

class SurveyAssigned extends Notification implements ShouldQueue
{
    use Queueable;

    protected $survey;
    protected $assignedBy;

    public function __construct(Survey $survey, User $assignedBy)
    {
        $this->survey = $survey;
        $this->assignedBy = $assignedBy;
    }

    public function via($notifiable)
    {
        return ['database', 'broadcast', 'mail'];
    }

    public function toMail($notifiable)
    {
        return (new MailMessage)
            ->subject('Tugas Survey Baru')
            ->greeting("Halo {$notifiable->name},")
            ->line("Anda ditugaskan untuk melakukan survey lapangan pada proyek: {$this->survey->project->name}")
            ->line("Tanggal Survey: {$this->survey->scheduled_date->format('d M Y, H:i')}")
            ->line("Lokasi: {$this->survey->project->location}")
            ->action('Lihat Tugas Survey', route('surveys.show', $this->survey->id))
            ->line('Harap selesaikan survey dan upload hasil survey melalui aplikasi sesuai jadwal.');
    }

    public function toArray($notifiable)
    {
        return [
            'survey_id' => $this->survey->id,
            'project_id' => $this->survey->project->id,
            'project_name' => $this->survey->project->name,
            'scheduled_date' => $this->survey->scheduled_date->format('d M Y, H:i'),
            'location' => $this->survey->project->location,
            'assigned_by' => $this->assignedBy->name,
            'message' => "Anda ditugaskan survey baru pada proyek {$this->survey->project->name}"
        ];
    }

    public function toBroadcast($notifiable)
    {
        return new BroadcastMessage([
            'id' => $this->id,
            'type' => 'survey_assigned',
            'survey_id' => $this->survey->id,
            'project_name' => $this->survey->project->name,
            'scheduled_date' => $this->survey->scheduled_date->format('d M Y, H:i'),
            'location' => $this->survey->project->location,
            'message' => "Survey lapangan baru untuk proyek {$this->survey->project->name} pada {$this->survey->scheduled_date->format('d M Y, H:i')}",
            'time' => now()->diffForHumans(),
            'icon' => 'bi-clipboard-check',
            'color' => 'success'
        ]);
    }
}

app\Providers\AppServiceProvider.php:
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        //
    }
}

app\Providers\AuthServiceProvider.php:
<?php

namespace App\Providers;

use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Gate;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * The policy mappings for the application.
     *
     * @var array<class-string, class-string>
     */
    protected $policies = [
        // 'App\Models\Model' => 'App\Policies\ModelPolicy',
    ];

    /**
     * Register any authentication / authorization services.
     */
    public function boot(): void
    {
        $this->registerPolicies();

        //
    }
}

app\Providers\BroadcastServiceProvider.php:
<?php

namespace App\Providers;

use Illuminate\Support\Facades\Broadcast;
use Illuminate\Support\ServiceProvider;

class BroadcastServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        // Only register broadcasting routes if we're not using the null driver
        if (config('broadcasting.default') !== 'null') {
            Broadcast::routes();

            require base_path('routes/channels.php');
        }
    }
}

app\Providers\EventServiceProvider.php:
<?php

namespace App\Providers;

use Illuminate\Auth\Events\Registered;
use Illuminate\Auth\Listeners\SendEmailVerificationNotification;
use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Event;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event to listener mappings for the application.
     *
     * @var array<class-string, array<int, class-string>>
     */
    protected $listen = [
        Registered::class => [
            SendEmailVerificationNotification::class,
        ],
    ];

    /**
     * Register any events for your application.
     */
    public function boot(): void
    {
        //
    }

    /**
     * Determine if events and listeners should be automatically discovered.
     */
    public function shouldDiscoverEvents(): bool
    {
        return false;
    }
}

app\Providers\RouteServiceProvider.php:
<?php

namespace App\Providers;

use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Facades\Route;

class RouteServiceProvider extends ServiceProvider
{
    /**
     * The path to your application's "home" route.
     *
     * Typically, users are redirected here after authentication.
     *
     * @var string
     */
    public const HOME = '/dashboard';

    /**
     * Define your route model bindings, pattern filters, and other route configuration.
     */
    public function boot(): void
    {
        RateLimiter::for('api', function (Request $request) {
            return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());
        });

        $this->routes(function () {
            Route::middleware('api')
                ->prefix('api')
                ->group(base_path('routes/api.php'));

            Route::middleware('web')
                ->group(base_path('routes/web.php'));
        });
    }
}